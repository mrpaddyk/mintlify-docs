{
    "openapi": "3.0.0",
    "info": {
        "version": "v3",
        "title": "Voyado Engage API",
        "description": "",
        "contact": {
            "name": "Developer documentation",
            "url": "https://developer.voyado.com"
        }
    },
    "paths": {
        "/api/v3/contacts/{contactId}/achievements": {
            "get": {
                "tags": [
                    "achievements"
                ],
                "operationId": "Achievements_GetAchievementsForContact",
                "parameters": [
                    {
                        "name": "contactId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ApiAchievementValue"
                                    }
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ApiAchievementValue"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/achievements": {
            "get": {
                "tags": [
                    "achievements"
                ],
                "operationId": "Achievements_GetAllAchievements",
                "parameters": [
                    {
                        "name": "offset",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagedResultOfApiAchievementDefinition"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagedResultOfApiAchievementDefinition"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/contacts/{contactId}/achievements/{achievementId}": {
            "post": {
                "tags": [
                    "achievements"
                ],
                "operationId": "Achievements_SetAchievement",
                "parameters": [
                    {
                        "name": "contactId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "achievementId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Achievements_SetAchievementValue"
                },
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "achievements"
                ],
                "operationId": "Achievements_RemoveAchievement",
                "parameters": [
                    {
                        "name": "contactId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "achievementId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/automation/customTriggers/{triggerId}/triggerByContactId/{contactId}": {
            "post": {
                "tags": [
                    "automation"
                ],
                "operationId": "CustomTriggers_TriggerByContactId",
                "parameters": [
                    {
                        "name": "triggerId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "contactId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Achievements_SetAchievementValue"
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/automation/customTriggers/{triggerId}/triggerBySocialSecurityNumber/{ssn}": {
            "post": {
                "tags": [
                    "automation"
                ],
                "operationId": "CustomTriggers_TriggerBySocialSecurityNumber",
                "parameters": [
                    {
                        "name": "triggerId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ssn",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Achievements_SetAchievementValue"
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/automation/customTriggers/{triggerId}/triggerByExternalContactId/{externalId}": {
            "post": {
                "tags": [
                    "automation"
                ],
                "operationId": "CustomTriggers_TriggerByExternalContactId",
                "parameters": [
                    {
                        "name": "triggerId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "externalId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Achievements_SetAchievementValue"
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/automation/customTriggers/{triggerId}/triggerByContactTypeAndKey/{contactType}/{keyValue}": {
            "post": {
                "tags": [
                    "automation"
                ],
                "operationId": "CustomTriggers_TriggerByContactTypeAndKey",
                "parameters": [
                    {
                        "name": "triggerId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "contactType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "keyValue",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Achievements_SetAchievementValue"
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/bisnode/{contactId}/enrichments": {
            "get": {
                "tags": [
                    "bisnode"
                ],
                "summary": "Get BCI enrichments for contact",
                "operationId": "BisnodeV_GetEnrichments",
                "parameters": [
                    {
                        "name": "contactId",
                        "in": "path",
                        "description": "Contact identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/EnrichmentVariableGroup"
                                    }
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/EnrichmentVariableGroup"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "NotFound",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResult"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResult"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/challenges/{id}": {
            "get": {
                "tags": [
                    "challenges"
                ],
                "summary": "Get challenge assignment by id.",
                "description": "Get an challenge assignment by id.",
                "operationId": "Challenge_GetChallengeById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Assignment id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "examples": {
                                    "response": {
                                        "value": {
                                            "challengeCompletedOn": null,
                                            "challengeEnd": null,
                                            "challengeId": "8528bc1b-a03d-4aed-9545-d156a71d5040",
                                            "challengeStart": "2025-07-18T09:39:37.3762133+02:00",
                                            "completedCheckpoints": 2,
                                            "imageUrl": null,
                                            "contactId": "75fdd8cd-9f70-4e36-8010-38a3720d9b91",
                                            "id": "26ce6acc-003d-4ade-a21f-d702d2b80d91",
                                            "isActive": false,
                                            "isChallengeCompleted": false,
                                            "latestCheckpointAddedOn": "2025-07-23T09:39:37.3762133+02:00",
                                            "requiredCheckpoints": 5,
                                            "status": "Active",
                                            "links": [
                                                {
                                                    "id": "26ce6acc-003d-4ade-a21f-d702d2b80d91",
                                                    "href": "https://mytenant.voyado.com/api/v{x}/challenges/26ce6acc-003d-4ade-a21f-d702d2b80d91",
                                                    "method": "GET",
                                                    "rel": "self"
                                                },
                                                {
                                                    "id": "8528bc1b-a03d-4aed-9545-d156a71d5040",
                                                    "href": "https://mytenant.voyado.com/api/v{x}/challenges/definitions/8528bc1b-a03d-4aed-9545-d156a71d5040",
                                                    "method": "GET",
                                                    "rel": "definition"
                                                }
                                            ]
                                        }
                                    }
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Challenge id does not exist."
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/challenges/definitions/{id}": {
            "get": {
                "tags": [
                    "challenges"
                ],
                "summary": "Get a challenge definition by id.",
                "description": "Get a challenge definition by id.",
                "operationId": "Challenge_GetChallengeDefinitionById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Definition id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "examples": {
                                    "response": {
                                        "value": {
                                            "id": "34feb3c0-f99f-44a8-8092-6b10709c162f",
                                            "name": "Sample Challenge",
                                            "checkpointAssignOn": "ProductPurchase",
                                            "createdBy": "Admin",
                                            "createdOn": "2025-07-15T09:39:37.3762133+02:00",
                                            "description": "Description of the sample challenge",
                                            "expirationDays": 60,
                                            "isContactConsentRequired": true,
                                            "isRecurring": false,
                                            "modifiedBy": "Admin",
                                            "isScheduled": true,
                                            "modifiedOn": "2025-07-25T09:39:37.3762133+02:00",
                                            "requiredNumberOfCheckpoints": 5,
                                            "scheduledFrom": "2025-07-25T09:39:37.3762133+02:00",
                                            "scheduledTo": "2025-08-25T09:39:37.3762133+02:00",
                                            "status": "Active"
                                        }
                                    }
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/challenges/definitions": {
            "get": {
                "tags": [
                    "challenges"
                ],
                "summary": "Get a list of all the challenge definitions.",
                "description": "Get a list of all the challenge definitions.",
                "operationId": "Challenge_GetChallengeDefinitions",
                "parameters": [
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Defaults to 0",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Defaults to 100",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "All, Active, Draft or Ended. If not specified it will default to All",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "All",
                                "Active",
                                "Draft",
                                "Scheduled",
                                "Ended"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "examples": {
                                    "response": {
                                        "value": {
                                            "items": [
                                                {
                                                    "id": "6c2aae54-1f8d-4f71-ac36-d8785f747964",
                                                    "name": "Sample Challenge",
                                                    "checkpointAssignOn": "ProductPurchase",
                                                    "createdBy": "Admin",
                                                    "createdOn": "2025-07-15T09:39:37.391877+02:00",
                                                    "description": "Description of the sample challenge",
                                                    "expirationDays": 60,
                                                    "isContactConsentRequired": true,
                                                    "isRecurring": false,
                                                    "modifiedBy": "Admin",
                                                    "isScheduled": false,
                                                    "modifiedOn": "2025-07-24T09:39:37.391877+02:00",
                                                    "requiredNumberOfCheckpoints": 5,
                                                    "scheduledFrom": null,
                                                    "scheduledTo": null,
                                                    "status": "Active",
                                                    "links": [
                                                        {
                                                            "id": "6c2aae54-1f8d-4f71-ac36-d8785f747964",
                                                            "href": "https://mytenant.voyado.com/api/v{x}/challenges/definitions/6c2aae54-1f8d-4f71-ac36-d8785f747964",
                                                            "method": "GET",
                                                            "rel": "self"
                                                        }
                                                    ]
                                                }
                                            ],
                                            "totalCount": 3,
                                            "offset": 1,
                                            "count": 1,
                                            "links": [
                                                {
                                                    "href": "https://mytenant.voyado.com/api/v{x}/challenges/definitions?offset=0&count=1&status=All",
                                                    "method": "GET",
                                                    "rel": "previous"
                                                },
                                                {
                                                    "href": "https://mytenant.voyado.com/api/v{x}/challenges/definitions?offset=2&count=1&status=All",
                                                    "method": "GET",
                                                    "rel": "next"
                                                }
                                            ]
                                        }
                                    }
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/challenges": {
            "get": {
                "tags": [
                    "challenges"
                ],
                "summary": "Search for challenges for a contact",
                "description": "Search for challenges for a contact.",
                "operationId": "Challenge_GetChallenges",
                "parameters": [
                    {
                        "name": "contactId",
                        "in": "query",
                        "description": "Contact id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "definitionId",
                        "in": "query",
                        "description": "Definition id - Optional to limit to a certain challenge definition",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Defaults to 0",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Defaults to 100",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "All, Active, Completed or NotCompleted. If not specified it will default to All",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "All",
                                "Active",
                                "Completed",
                                "NotCompleted"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "examples": {
                                    "response": {
                                        "value": {
                                            "links": [
                                                {
                                                    "href": "https://mytenant.voyado.com/api/v{x}/challenges?offset=0&count=20&contactId=7cd5ec1f-df1d-44a6-b5a4-5c1f6506ba15",
                                                    "method": "GET",
                                                    "rel": "previous"
                                                },
                                                {
                                                    "href": "https://mytenant.voyado.com/api/v{x}/challenges?offset=20&count=40&contactId=7cd5ec1f-df1d-44a6-b5a4-5c1f6506ba15",
                                                    "method": "GET",
                                                    "rel": "next"
                                                }
                                            ],
                                            "items": [
                                                {
                                                    "challengeCompletedOn": null,
                                                    "challengeEnd": null,
                                                    "challengeId": "53788657-1876-4da5-8889-299c74ab8e61",
                                                    "challengeStart": "2025-07-18T09:39:37.391877+02:00",
                                                    "completedCheckpoints": 2,
                                                    "imageUrl": null,
                                                    "contactId": "2eb9362b-d54c-4480-984e-088f17abea13",
                                                    "id": "9aa50227-7d75-4209-b70a-737512b3df4b",
                                                    "isActive": false,
                                                    "isChallengeCompleted": false,
                                                    "latestCheckpointAddedOn": "2025-07-23T09:39:37.391877+02:00",
                                                    "requiredCheckpoints": 5,
                                                    "status": "Active",
                                                    "links": [
                                                        {
                                                            "id": "9aa50227-7d75-4209-b70a-737512b3df4b",
                                                            "href": "https://mytenant.voyado.com/api/v{x}/challenges/9aa50227-7d75-4209-b70a-737512b3df4b",
                                                            "method": "GET",
                                                            "rel": "self"
                                                        },
                                                        {
                                                            "id": "53788657-1876-4da5-8889-299c74ab8e61",
                                                            "href": "https://mytenant.voyado.com/api/v{x}/challenges/definitions/53788657-1876-4da5-8889-299c74ab8e61",
                                                            "method": "GET",
                                                            "rel": "definition"
                                                        }
                                                    ]
                                                }
                                            ],
                                            "totalCount": 1,
                                            "offset": 0,
                                            "count": 1
                                        }
                                    }
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/challenges/checkpoints": {
            "post": {
                "tags": [
                    "challenges"
                ],
                "summary": "Add checkpoints to contacts",
                "description": "Send in a list of checkpoints to be assigned to a some challenge for a number of contacts,\r\nthe endpoint will be able to take max 1000 checkpoint rows.\r\n            \r\n### The following fields should be provided:\r\n            \r\n- definitionId: Must be a Guid\r\n- contactId: Must be a Guid\r\n- checkPointAmount: Number of checkpoints to assign to the challenge\r\n            \r\n### Important info:\r\nIf some rows are not correct it will still result in an OK response code and the incorrect checkpoints will be skipped. Please\r\ncheck the response for NotAccepted items.",
                "operationId": "Challenge_AddChallengeCheckPoints",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ChallengeCheckPointModel"
                                },
                                "example": [
                                    {
                                        "definitionId": "80e6d119-bb78-443a-8774-7aa1b7962a48",
                                        "contactId": "333f19a4-a5be-4d45-bed0-fa1d32be118f",
                                        "checkpointAmount": 5
                                    }
                                ]
                            }
                        }
                    },
                    "description": "The JSON object which contains the checkpoint transactions.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Some or all of the checkpoints successfully added",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddCheckpointResultExample"
                                },
                                "examples": {
                                    "response": {
                                        "value": {
                                            "missingContactIds": [
                                                "a70811f4-7366-47d4-b020-eca00fb791c3"
                                            ],
                                            "missingDefinitionIds": [
                                                "74d32070-185f-4e7d-baa7-53341192bfc5"
                                            ],
                                            "notAccepted": [
                                                {
                                                    "definitionId": "74d32070-185f-4e7d-baa7-53341192bfc5",
                                                    "contactId": "c7f1fce3-f2b2-41bb-a04b-fac28914a49b",
                                                    "checkpointAmount": 3
                                                },
                                                {
                                                    "definitionId": "64c15964-fc23-428c-b399-383a6ff68d86",
                                                    "contactId": "a70811f4-7366-47d4-b020-eca00fb791c3",
                                                    "checkpointAmount": 2
                                                }
                                            ]
                                        }
                                    }
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddCheckpointResultExample"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Too many items, Not a valid payload, All checkpoint amounts must be greater than 0"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/challenges/definitions/{id}/assign": {
            "post": {
                "tags": [
                    "challenges"
                ],
                "summary": "Assign a specific challenge to the approved contact, considering that the contact has granted approval.",
                "description": "Will assign the challenge for the contact and return true. If the contact already\r\nhas been assigned for the challenge it will also return true.",
                "operationId": "Challenge_Consent",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Definition id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "contactId",
                        "in": "query",
                        "description": "Contact id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Challenge definition or contact does not exists"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/consents": {
            "get": {
                "tags": [
                    "consents"
                ],
                "summary": "Get all consents definitions",
                "description": "Get all consents definitions\r\n\r\nExample of metaData for a Consent:\r\n\r\n\"metaData\": {\r\n  \"conditionText\": {\r\n    \"sv-SE\": \"Svensk villkorstext\",\r\n    \"en-GB\": \"English text to show for condition\"\r\n  },\r\n  \"displayText\": {\r\n    \"sv-SE\": \"Svensk text att visa\",\r\n    \"en-GB\": \"English text to display\"\r\n  },\r\n  \"linkText\": {\r\n    \"sv-SE\": \"Svensk text att visa på länk\",\r\n    \"en-GB\": \"English text to show on link\"\r\n  }\r\n}",
                "operationId": "Consents_GetConsents",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ApiConsentDefinition"
                                    }
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ApiConsentDefinition"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/contactoverview": {
            "get": {
                "tags": [
                    "contactoverview"
                ],
                "summary": "Get all information about a single contact.",
                "description": "Get all information about a single contact by specifying either:\r\n- contactId\r\n- email and contactType\r\n- socialSecurityNumber and contactType\r\n- mobilePhone and contactType\r\n- customKey and contactType (the customKey must be configured by your supplier)\r\n- any and contactType - the any field can contain email, socialSecurityNumber, mobilePhone or the custom key (and are checked in that order)\r\n            \r\nThe dynamic fields of the response depend on your current Voyado configuration.",
                "operationId": "ContactOverview_GetContactOverviewAsync",
                "parameters": [
                    {
                        "name": "contactType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "contactId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "socialSecurityNumber",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "mobilePhone",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customKey",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "any",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "InvalidEmailAddress, InvalidSocialSecurityNumber, InvalidPhoneNumber, InvalidContactId, InvalidSearchQuery, InvalidContactType"
                    },
                    "404": {
                        "description": "ContactNotFound"
                    },
                    "409": {
                        "description": "MultipleMatches"
                    },
                    "500": {
                        "description": "InvalidSystemConfiguration"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/contacts/{contactId}": {
            "get": {
                "tags": [
                    "contacts"
                ],
                "summary": "Get a single contact.",
                "description": "Get a single contact, using the unique identifier.\r\n\r\nThe dynamic fields of the response object depend on\r\nthe current instance configuration.",
                "operationId": "ContactsV_GetContactById",
                "parameters": [
                    {
                        "name": "contactId",
                        "in": "path",
                        "description": "Contact identifier (GUID).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IApiContact"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IApiContact"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "ContactNotFound"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "contacts"
                ],
                "summary": "Deletes a contact",
                "operationId": "ContactsV_ContactDelete",
                "parameters": [
                    {
                        "name": "contactId",
                        "in": "path",
                        "description": "Contact identifier (GUID).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "source",
                        "in": "query",
                        "description": "Source system identifier (instance configuration)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "ContactNotFound"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "contacts"
                ],
                "summary": "Update a contact.",
                "description": "Update one or several fields of a single contact.\r\nDo not send an empty value unless you want it to be empty.",
                "operationId": "ContactsV_ContactPatch",
                "parameters": [
                    {
                        "name": "contactId",
                        "in": "path",
                        "description": "Contact identifier (GUID).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/contactAttributes"
                            }
                        }
                    },
                    "description": "Updates to apply.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IApiContact"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IApiContact"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "NoData"
                    },
                    "404": {
                        "description": "ContactNotFound"
                    },
                    "422": {
                        "description": "ValidationError"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/contacts/bulk/status": {
            "get": {
                "tags": [
                    "contacts"
                ],
                "summary": "Get status for a specific contact bulk import",
                "description": "",
                "operationId": "ContactBulk_GetBulkStatus",
                "parameters": [
                    {
                        "name": "batchId",
                        "in": "query",
                        "description": "Id from bulk contact import",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Status object for batch",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "BulkStatusNotFound"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/contacts/{contactId}/productrecommendations": {
            "get": {
                "tags": [
                    "contacts"
                ],
                "summary": "Get recommended products for a contact.",
                "operationId": "ProductRecommendation_GetProductRecommendations",
                "parameters": [
                    {
                        "name": "contactId",
                        "in": "path",
                        "description": "Contact identifier (GUID).",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductRecommendationsModel"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductRecommendationsModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "InvalidContactId"
                    },
                    "404": {
                        "description": "ContactNotFound"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/contacts/{contactId}/purchasehistorysummary": {
            "get": {
                "tags": [
                    "contacts"
                ],
                "summary": "Get purchase history summary for a single contact.",
                "description": "Following summary shows the purchase history for a single contact, over all time, 12 months and 24 months.",
                "operationId": "ContactRetailKpi_GetPurchaseHistory",
                "parameters": [
                    {
                        "name": "contactId",
                        "in": "path",
                        "description": "Contact identifier (GUID)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PurchaseHistorySummary"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PurchaseHistorySummary"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "RetailKpiNotCalculated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResult"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResult"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/contacts/{contactId}/smsmessages": {
            "get": {
                "tags": [
                    "contacts"
                ],
                "summary": "Get the latest SMS messages a contact has received, max 500",
                "description": "Can retrieve messages up to three (3) months old",
                "operationId": "ContactMessage_GetSmsMessagesByContactId",
                "parameters": [
                    {
                        "name": "contactId",
                        "in": "path",
                        "description": "Contact identifier (GUID)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Max number of items to take, default value 100, max 500",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResultOfApiMessage"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResultOfApiMessage"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "ContactNotFound"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/contacts/{contactId}/emailmessages": {
            "get": {
                "tags": [
                    "contacts"
                ],
                "summary": "Get the latest email messages a contact has received, max 500",
                "description": "Can retrieve messages up to three (3) months old",
                "operationId": "ContactMessage_GetEmailMessagesByContactId",
                "parameters": [
                    {
                        "name": "contactId",
                        "in": "path",
                        "description": "Contact identifier (GUID)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Max number of items to take, default value 100, max 500",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResultOfApiMessage"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResultOfApiMessage"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "ContactNotFound"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/contacts/{contactType}/byexternalid/{externalId}": {
            "get": {
                "tags": [
                    "contacts"
                ],
                "summary": "Get a single contact by type and external id.",
                "description": "Get a single contact of a certain type, using the\r\ncontact's external id.\r\n\r\nThe dynamic fields of the response object depend on\r\nthe current configuration.",
                "operationId": "ContactsV_GetContactByExternalIdAsync",
                "parameters": [
                    {
                        "name": "contactType",
                        "in": "path",
                        "description": "Contact type, e.g. Member or Contact.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "externalId",
                        "in": "path",
                        "description": "External contact id.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IApiContact"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IApiContact"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "InvalidContactType"
                    },
                    "404": {
                        "description": "ContactNotFound"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/contacts/{contactType}/bykey": {
            "get": {
                "tags": [
                    "contacts"
                ],
                "summary": "Get a single contact by type and key value.",
                "description": "Get a single contact of a certain type, using a key\r\nvalue that corresponds to the current instance configuration. This can\r\nonly be used for contact types with exactly ONE key.\r\n\r\nThe dynamic fields of the response object depend on\r\nthe current configuration.",
                "operationId": "ContactsV_GetContactByTypeAndKeyValueAsync",
                "parameters": [
                    {
                        "name": "contactType",
                        "in": "path",
                        "description": "Contact type, e.g. \"member\".",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "keyValue",
                        "in": "query",
                        "description": "Key value, e.g. ssn, phone number etc.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IApiContact"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IApiContact"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "InvalidContactType, InvalidEmailAddress, InvalidPhoneNumber, InvalidSocialSecurityNumber"
                    },
                    "404": {
                        "description": "ContactNotFound"
                    },
                    "409": {
                        "description": "MultipleMatches"
                    },
                    "500": {
                        "description": "InvalidSystemConfiguration"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/contacts/{contactId}/postalmessages": {
            "get": {
                "tags": [
                    "contacts"
                ],
                "summary": "Get the latest postal messages a contact has received, max 500",
                "description": "Can retrieve messages up to three (3) months old",
                "operationId": "ContactMessage_GetPostalMessagesByContactId",
                "parameters": [
                    {
                        "name": "contactId",
                        "in": "path",
                        "description": "Contact identifier (GUID)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Max number of items to take, default value 100, max 500",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResultOfApiMessage"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResultOfApiMessage"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "ContactNotFound"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/contacts/changes": {
            "get": {
                "tags": [
                    "contacts"
                ],
                "summary": "Gets a list containing the contact IDs of all contacts who have been changed within a specified time range.",
                "operationId": "ContactsV_GetChangedContactIds",
                "parameters": [
                    {
                        "name": "changeType",
                        "in": "query",
                        "description": "Created, Updated or Deleted",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Created",
                                "Updated",
                                "Deleted"
                            ]
                        }
                    },
                    {
                        "name": "fromDate",
                        "in": "query",
                        "description": "Start of timespan (ex 2023-05-04 11:20:00.000)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "toDate",
                        "in": "query",
                        "description": "End of timespan (Default the current time and date)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/contacts/id": {
            "get": {
                "tags": [
                    "contacts"
                ],
                "summary": "Get the contactId for one (or several) contacts using a choice of keys.",
                "description": "Get the contactId for one (or several) contacts using either:\r\n- email\r\n- socialSecurityNumber\r\n- mobilePhone\r\n- customKey (the customKey must be configured by your supplier)\r\n- any - the any field can contain email, socialSecurityNumber, mobilePhone or the custom key (and are checked in that order)",
                "operationId": "ContactOverview_GetContactIdAsync",
                "parameters": [
                    {
                        "name": "contactType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "socialSecurityNumber",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "mobilePhone",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customKey",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "any",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "InvalidEmailAddress, InvalidSocialSecurityNumber, InvalidPhoneNumber, InvalidSearchQuery, InvalidContactType"
                    },
                    "404": {
                        "description": "ContactNotFound"
                    },
                    "409": {
                        "description": "MultipleMatches, shows first 50 multiple matches",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiExceptionMultipleMatchesResponse"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiExceptionMultipleMatchesResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InvalidSystemConfiguration"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/contacts/bulk": {
            "post": {
                "tags": [
                    "contacts"
                ],
                "summary": "Create a number of contacts",
                "description": "",
                "operationId": "ContactBulk_CreateContactsInBulk",
                "parameters": [
                    {
                        "name": "contactType",
                        "in": "query",
                        "description": "Optional, if not set the default ContactType will be used",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/contactCreateBulkExample"
                            }
                        }
                    },
                    "description": "Value in JArray",
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "BatchId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "format": "uuid",
                                    "type": "string",
                                    "example": "00000000-0000-0000-0000-000000000000"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "format": "uuid",
                                    "type": "string",
                                    "example": "00000000-0000-0000-0000-000000000000"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "422": {
                        "description": "UnprocessableEntity"
                    },
                    "503": {
                        "description": "ServiceUnavailable"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "contacts"
                ],
                "summary": "Update a number of contacts",
                "description": "",
                "operationId": "ContactBulk_UpdateContactsInBulk",
                "parameters": [
                    {
                        "name": "contactType",
                        "in": "query",
                        "description": "Optional, if not set the default ContactType will be used",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "avoidTriggeringExport",
                        "in": "query",
                        "description": "Optional, default value is false",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/contactUpdateBulkExample"
                            }
                        }
                    },
                    "description": "Value in JArray",
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "BatchId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "format": "uuid",
                                    "type": "string",
                                    "example": "00000000-0000-0000-0000-000000000000"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "format": "uuid",
                                    "type": "string",
                                    "example": "00000000-0000-0000-0000-000000000000"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "422": {
                        "description": "UnprocessableEntity"
                    },
                    "503": {
                        "description": "ServiceUnavailable"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/contacts/{contactId}/unsubscribeSms": {
            "post": {
                "tags": [
                    "contacts"
                ],
                "summary": "Unsubscribes contact from Sms",
                "description": "Optional messageId input if user wants to unsubscribe on specific message instead of last sent Sms",
                "operationId": "ContactMessage_SmsUnsubscribeContact",
                "parameters": [
                    {
                        "name": "contactId",
                        "in": "path",
                        "description": "Contact identifier (GUID).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "messageId",
                        "in": "query",
                        "description": "Message Id (string).",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "ValidationError"
                    },
                    "404": {
                        "description": "ContactNotFound"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/contacts/{contactId}/unsubscribeEmail": {
            "post": {
                "tags": [
                    "contacts"
                ],
                "summary": "Unsubscribes contact from email",
                "description": "Optional messageId input if user wants to unsubscribe on specific message instead of last sent email",
                "operationId": "ContactMessage_EmailUnsubscribeContact",
                "parameters": [
                    {
                        "name": "contactId",
                        "in": "path",
                        "description": "Contact identifier (GUID).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "messageId",
                        "in": "query",
                        "description": "Message Id (string).",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "ValidationError"
                    },
                    "404": {
                        "description": "ContactNotFound"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/contacts/{contactId}/updateContactType": {
            "post": {
                "tags": [
                    "contacts"
                ],
                "summary": "Update contacttype for contact",
                "description": "Updates the contactType for a contact if all expected contact data is available",
                "operationId": "ContactsV_UpdateContactType",
                "parameters": [
                    {
                        "name": "contactId",
                        "in": "path",
                        "description": "Contact identifier (GUID).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "contactTypeId",
                        "in": "query",
                        "description": "The ContactType id (string).",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "InvalidContactType"
                    },
                    "404": {
                        "description": "ContactNotFound"
                    },
                    "422": {
                        "description": "ValidationError"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/contacts/{contactId}/createNpsResponse": {
            "post": {
                "tags": [
                    "contacts"
                ],
                "summary": "Create a NPS response for a contact",
                "description": "Create a NPS response for a contact. Optional input is stordeId if Nps response is connected to a store",
                "operationId": "Nps_CreateNpsResponse",
                "parameters": [
                    {
                        "name": "contactId",
                        "in": "path",
                        "description": "Contact identifier (GUID).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "grade",
                        "in": "query",
                        "description": "Grade (int). Must be between 0 and 10",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "storeId",
                        "in": "query",
                        "description": "Store identifier (GUID)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "InvalidGrade"
                    },
                    "404": {
                        "description": "ContactNotFound"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/contacts": {
            "post": {
                "tags": [
                    "contacts"
                ],
                "summary": "Create a new contact.",
                "description": "Create a new contact.\r\nIf the contacts key identifier (example: Email) already exists : returns the GUID of the first entry found.",
                "operationId": "ContactsV_ContactPost",
                "parameters": [
                    {
                        "name": "source",
                        "in": "query",
                        "description": "Source system identifier (instance configuration)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "storeExternalId",
                        "in": "query",
                        "description": "The unique id code of the current store (and therefore also the recruited-by store). Not mandatory but strongly recommended.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "createAsUnapproved",
                        "in": "query",
                        "description": "Contact is not approved on creation. (Default value false)",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/contactPost"
                            }
                        }
                    },
                    "description": "Contact data.",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IApiContact"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IApiContact"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "NoData"
                    },
                    "409": {
                        "description": "ApprovedContactWithKeyExists, ContactWithKeyIsBeingCreated"
                    },
                    "422": {
                        "description": "ValidationError"
                    },
                    "504": {
                        "description": "RequestTimeOut"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/interactions/{interactionId}": {
            "get": {
                "tags": [
                    "interactions"
                ],
                "summary": "Get Interaction",
                "description": "Retrieve a specific Interaction by providing the interactionId.",
                "operationId": "Interaction_GetInteraction",
                "parameters": [
                    {
                        "name": "interactionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Interaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InteractionModel"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InteractionModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest"
                    },
                    "404": {
                        "description": "Interaction not found"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "interactions"
                ],
                "summary": "Delete Interaction",
                "description": "Delete a specific Interaction by providing the interactionId.",
                "operationId": "Interaction_DeleteInteraction",
                "parameters": [
                    {
                        "name": "interactionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Interaction Removed"
                    },
                    "400": {
                        "description": "BadRequest"
                    },
                    "404": {
                        "description": "Interaction not found"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/interactions": {
            "get": {
                "tags": [
                    "interactions"
                ],
                "summary": "Get multiple Interactions",
                "description": "Retrieve multiple Interactions of a specified type connected to a specific contactId. Both schemaId and contactId are required. \r\nThe continuation parameter can be used to access the next page when there are more than 50 records available. This token can be found in the response.",
                "operationId": "Interaction_GetInteractions",
                "parameters": [
                    {
                        "name": "contactId",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "schemaId",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "continuation",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Interactions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InteractionPage"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InteractionPage"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest"
                    },
                    "404": {
                        "description": "Interaction not found"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "interactions"
                ],
                "summary": "Create new Interaction",
                "description": "Create a new Interaction connected to a specific contactId.",
                "operationId": "Interaction_CreateInteraction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/interactionSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "InteractionResponse",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InteractionCreateResponse"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InteractionCreateResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/interactionschemas": {
            "get": {
                "tags": [
                    "interactionschemas"
                ],
                "summary": "Get InteractionSchemas",
                "description": "Retrieve all InteractionSchemas.",
                "operationId": "InteractionSchema_GetInteractionSchemas",
                "responses": {
                    "200": {
                        "description": "InteractionSchemas",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InteractionSchemaWithoutJsonModel"
                                    }
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InteractionSchemaWithoutJsonModel"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "interactionschemas"
                ],
                "summary": "Create a new InteractionSchema",
                "description": "Create a new InteractionSchema.",
                "operationId": "InteractionSchema_CreateInteractionSchema",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/interactionSchemaSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "InteractionSchemaResponse",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InteractionSchemaResponse"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InteractionSchemaResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/interactionschemas/{interactionSchemaId}": {
            "get": {
                "tags": [
                    "interactionschemas"
                ],
                "summary": "Get InteractionSchema",
                "description": "Retrieve a specific InteractionSchema by providing the schemaId.",
                "operationId": "InteractionSchema_GetInteractionSchema",
                "parameters": [
                    {
                        "name": "interactionSchemaId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "InteractionSchema",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InteractionSchemaModel"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InteractionSchemaModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "interactionschemas"
                ],
                "summary": "Delete InteractionSchema",
                "description": "Delete InteractionSchema by providing the schemaId.",
                "operationId": "InteractionSchema_DeleteInteractionSchema",
                "parameters": [
                    {
                        "name": "interactionSchemaId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "InteractionSchema Removed"
                    },
                    "400": {
                        "description": "BadRequest"
                    },
                    "404": {
                        "description": "Interaction Schema not found"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/orders/jobs/{jobId}": {
            "get": {
                "tags": [
                    "orders"
                ],
                "summary": "Get job status of asynchronous requests",
                "description": "Returns the job status of requests to change an order.\r\n            \r\nAll endpoints that create or change an order is asynchronous. That is the request returns with code 202 Accepted and a link to this endpoint where the client can query for progress of the change.\r\n- If the job is processing the return is 200 with information about the job, status is \"Processing\"\r\n- If the job completed successfully the return is a 200 with information about the job and status is \"Completed\".\r\n- If the request could not be processed the return is an Error.",
                "operationId": "Orders_GetJob",
                "parameters": [
                    {
                        "name": "jobId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Status of requested job",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderJob"
                                },
                                "examples": {
                                    "response": {
                                        "value": {
                                            "status": "Processing",
                                            "jobId": "L263E2VHWYC",
                                            "orderId": "order-123"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No job found"
                    },
                    "409": {
                        "description": "The request conflicted with internal state",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderJob"
                                },
                                "examples": {
                                    "response": {
                                        "value": {
                                            "status": "Error",
                                            "jobId": "L263E2VHWYC",
                                            "orderId": "order-123",
                                            "error": "Order already created"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Could not process request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderJob"
                                },
                                "examples": {
                                    "response": {
                                        "value": {
                                            "status": "Error",
                                            "jobId": "L263E2VHWYC",
                                            "orderId": "order-123",
                                            "error": "Order already created"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/orders/{orderId}": {
            "get": {
                "tags": [
                    "orders"
                ],
                "summary": "Get specific order",
                "description": "Get a specific order by unique order identifier.\r\nIf the optional contactId is supplied it is verified that the order is connected to the contact.",
                "operationId": "Orders_Get",
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "Unique order identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "contactId",
                        "in": "query",
                        "description": "Optional contactId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Requested order",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderResponse"
                                },
                                "examples": {
                                    "response": {
                                        "value": {
                                            "orderId": "order-123",
                                            "contactId": "32476f93-5e6c-4d17-b7e8-0a4a3ce07484",
                                            "versionTag": "roifado5xmcvk5clyli6aewmx4",
                                            "externalStoreId": "Ecom-Europe",
                                            "status": "InProgress",
                                            "externalStatus": "Picked",
                                            "references": [
                                                "order-123"
                                            ],
                                            "currencyCode": "EUR",
                                            "channel": "Ecom",
                                            "createdAt": "2025-07-25T09:38:37+02:00",
                                            "lastChangedAt": "2025-07-25T09:39:37+02:00",
                                            "lineItems": {
                                                "items": [
                                                    {
                                                        "id": "item-1",
                                                        "type": "Purchase",
                                                        "externalStatus": "Reserved",
                                                        "quantity": 1,
                                                        "article": {
                                                            "sku": "1978-abc80-1",
                                                            "name": "ABC 80",
                                                            "description": "Advanced Basic Computer for the 1980s",
                                                            "imageUri": "https://placehold.co/600x420",
                                                            "targetUri": "https://example.com/abc80"
                                                        },
                                                        "discounts": {
                                                            "items": [
                                                                {
                                                                    "type": "Voucher",
                                                                    "description": "Reward voucher",
                                                                    "amount": 100,
                                                                    "code": "reward"
                                                                }
                                                            ]
                                                        },
                                                        "returnDetails": null,
                                                        "pricePerUnit": 1199,
                                                        "originalPricePerUnit": 1299,
                                                        "totalPrice": 1199,
                                                        "originalTotalPrice": 1299,
                                                        "taxes": {
                                                            "items": [
                                                                {
                                                                    "amount": 299.75,
                                                                    "percent": 25,
                                                                    "description": "VAT"
                                                                }
                                                            ]
                                                        },
                                                        "group": "group-1"
                                                    },
                                                    {
                                                        "id": "item-2",
                                                        "type": "Purchase",
                                                        "externalStatus": "Picked",
                                                        "quantity": 2,
                                                        "article": {
                                                            "sku": "1978-abc80-2",
                                                            "name": "Power Supply",
                                                            "description": "Advanced Basic Computer for the 1980s",
                                                            "imageUri": "https://placehold.co/600x420",
                                                            "targetUri": "https://example.com/abc80"
                                                        },
                                                        "discounts": {
                                                            "items": [
                                                                {
                                                                    "type": "Voucher",
                                                                    "description": "Reward voucher",
                                                                    "amount": 100,
                                                                    "code": "reward"
                                                                }
                                                            ]
                                                        },
                                                        "returnDetails": null,
                                                        "pricePerUnit": 199,
                                                        "originalPricePerUnit": 299,
                                                        "totalPrice": 398,
                                                        "originalTotalPrice": 598,
                                                        "taxes": {
                                                            "items": [
                                                                {
                                                                    "amount": 99.5,
                                                                    "percent": 25,
                                                                    "description": "VAT"
                                                                }
                                                            ]
                                                        },
                                                        "group": "group-2"
                                                    }
                                                ],
                                                "subTotal": 1597
                                            },
                                            "payments": {
                                                "items": [
                                                    {
                                                        "paidAt": "2025-07-25T09:39:37.8295894+02:00",
                                                        "method": "CreditDebit",
                                                        "amount": 1647,
                                                        "description": "MasterCard payment"
                                                    }
                                                ]
                                            },
                                            "fees": {
                                                "items": [
                                                    {
                                                        "type": "Shipping",
                                                        "description": "DHL",
                                                        "amount": 100,
                                                        "taxes": {
                                                            "items": [
                                                                {
                                                                    "amount": 25,
                                                                    "percent": 25,
                                                                    "description": "VAT"
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "Administration",
                                                        "description": "Administration fee",
                                                        "amount": 50,
                                                        "taxes": {
                                                            "items": [
                                                                {
                                                                    "amount": 12.5,
                                                                    "percent": 25,
                                                                    "description": "VAT"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            },
                                            "discounts": {
                                                "items": [
                                                    {
                                                        "type": "Seasonal",
                                                        "description": "Vintage Days campaign",
                                                        "amount": 100,
                                                        "code": "vintagedays"
                                                    }
                                                ]
                                            },
                                            "returnDetails": null,
                                            "delivery": {
                                                "method": "DHL",
                                                "trackingNumber": "1234567890",
                                                "trackingUri": "https://dhl.com/track/1234567890",
                                                "deliveryDate": "2025-07-28T09:39:37+02:00"
                                            },
                                            "billingAddress": {
                                                "title": "Mr",
                                                "firstname": "John",
                                                "lastname": "Doe",
                                                "streetAddress": "Main Street 1",
                                                "streetAddress2": null,
                                                "postalCode": "12345",
                                                "region": null,
                                                "city": "Springfield",
                                                "country": "US",
                                                "email": "john@example.com",
                                                "phone": "+1234567890"
                                            },
                                            "deliveryAddress": {
                                                "title": "Mr",
                                                "firstname": "John",
                                                "lastname": "Doe",
                                                "streetAddress": "Main Street 1",
                                                "streetAddress2": null,
                                                "postalCode": "12345",
                                                "region": null,
                                                "city": "Springfield",
                                                "country": "US",
                                                "email": "john@example.com",
                                                "phone": "+1234567890"
                                            },
                                            "totalPrice": 1647,
                                            "taxes": {
                                                "items": [
                                                    {
                                                        "amount": 411.75,
                                                        "percent": 25,
                                                        "description": "VAT"
                                                    }
                                                ],
                                                "totalTax": 411.75
                                            },
                                            "links": [
                                                {
                                                    "id": "order-123",
                                                    "href": "https://mytenant.voyado.com/api/v3/orders/order-123",
                                                    "method": "GET",
                                                    "rel": "self"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "Order not found or the optional contactId did not match the order"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "orders"
                ],
                "summary": "Replace order",
                "description": "Sends a request to replace an order. The replacement is asynchronous - use the information in the response to follow the progress and catch any errors.",
                "operationId": "Orders_Put",
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "Unique order identifier by client",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReplaceOrderRequest"
                            }
                        }
                    },
                    "description": "Order object",
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Request has been accepted",
                        "headers": {
                            "Location": {
                                "description": "Location of the job endpoint",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderJob"
                                },
                                "examples": {
                                    "response": {
                                        "value": {
                                            "status": "Accepted",
                                            "jobId": "L263E2VHWYC",
                                            "orderId": "order-123",
                                            "href": "https://mytenant.voyado.com/api/v3/example/jobs/endpoint/for/jobid/L263E2VHWYC"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "orders"
                ],
                "summary": "Delete order",
                "description": "Sends a request to delete an order. The deletion is asynchronous - use the information in the response to follow the progress and catch any errors.",
                "operationId": "Orders_Delete",
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "Unique order identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Request has been accepted",
                        "headers": {
                            "Location": {
                                "description": "Location of the job endpoint",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderJob"
                                },
                                "examples": {
                                    "response": {
                                        "value": {
                                            "status": "Accepted",
                                            "jobId": "L263E2VHWYC",
                                            "orderId": "order-123",
                                            "href": "https://mytenant.voyado.com/api/v3/example/jobs/endpoint/for/jobid/L263E2VHWYC"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/orders": {
            "get": {
                "tags": [
                    "orders"
                ],
                "summary": "Get orders by contact",
                "description": "Gets all orders for a contact. Returns a paged result with links that can be used to get the next/previous result set.",
                "operationId": "Orders_GetAllByContact",
                "parameters": [
                    {
                        "name": "contactId",
                        "in": "query",
                        "description": "Contact identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Defaults to 0",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Defaults to 10",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Orders for a contact",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagedOrderResponses"
                                },
                                "examples": {
                                    "response": {
                                        "value": {
                                            "items": [
                                                {
                                                    "orderId": "order-123",
                                                    "contactId": "1b322d05-322c-465e-8918-c12a9e37e893",
                                                    "versionTag": "roifado5xmcvk5clyli6aewmx4",
                                                    "externalStoreId": "Ecom-Europe",
                                                    "status": "InProgress",
                                                    "externalStatus": "Picked",
                                                    "references": [
                                                        "order-123"
                                                    ],
                                                    "currencyCode": "EUR",
                                                    "channel": "Ecom",
                                                    "createdAt": "2025-07-25T09:38:37+02:00",
                                                    "lastChangedAt": "2025-07-25T09:39:37+02:00",
                                                    "lineItems": {
                                                        "items": [
                                                            {
                                                                "id": "item-1",
                                                                "type": "Purchase",
                                                                "externalStatus": "Reserved",
                                                                "quantity": 1,
                                                                "article": {
                                                                    "sku": "1978-abc80-1",
                                                                    "name": "ABC 80",
                                                                    "description": "Advanced Basic Computer for the 1980s",
                                                                    "imageUri": "https://placehold.co/600x420",
                                                                    "targetUri": "https://example.com/abc80"
                                                                },
                                                                "discounts": {
                                                                    "items": [
                                                                        {
                                                                            "type": "Voucher",
                                                                            "description": "Reward voucher",
                                                                            "amount": 100,
                                                                            "code": "reward"
                                                                        }
                                                                    ]
                                                                },
                                                                "returnDetails": null,
                                                                "pricePerUnit": 1199,
                                                                "originalPricePerUnit": 1299,
                                                                "totalPrice": 1199,
                                                                "originalTotalPrice": 1299,
                                                                "taxes": {
                                                                    "items": [
                                                                        {
                                                                            "amount": 299.75,
                                                                            "percent": 25,
                                                                            "description": "VAT"
                                                                        }
                                                                    ]
                                                                },
                                                                "group": "group-1"
                                                            },
                                                            {
                                                                "id": "item-2",
                                                                "type": "Purchase",
                                                                "externalStatus": "Picked",
                                                                "quantity": 2,
                                                                "article": {
                                                                    "sku": "1978-abc80-2",
                                                                    "name": "Power Supply",
                                                                    "description": "Advanced Basic Computer for the 1980s",
                                                                    "imageUri": "https://placehold.co/600x420",
                                                                    "targetUri": "https://example.com/abc80"
                                                                },
                                                                "discounts": {
                                                                    "items": [
                                                                        {
                                                                            "type": "Voucher",
                                                                            "description": "Reward voucher",
                                                                            "amount": 100,
                                                                            "code": "reward"
                                                                        }
                                                                    ]
                                                                },
                                                                "returnDetails": null,
                                                                "pricePerUnit": 199,
                                                                "originalPricePerUnit": 299,
                                                                "totalPrice": 398,
                                                                "originalTotalPrice": 598,
                                                                "taxes": {
                                                                    "items": [
                                                                        {
                                                                            "amount": 99.5,
                                                                            "percent": 25,
                                                                            "description": "VAT"
                                                                        }
                                                                    ]
                                                                },
                                                                "group": "group-2"
                                                            }
                                                        ],
                                                        "subTotal": 1597
                                                    },
                                                    "payments": {
                                                        "items": [
                                                            {
                                                                "paidAt": "2025-07-25T09:39:37.9076659+02:00",
                                                                "method": "CreditDebit",
                                                                "amount": 1647,
                                                                "description": "MasterCard payment"
                                                            }
                                                        ]
                                                    },
                                                    "fees": {
                                                        "items": [
                                                            {
                                                                "type": "Shipping",
                                                                "description": "DHL",
                                                                "amount": 100,
                                                                "taxes": {
                                                                    "items": [
                                                                        {
                                                                            "amount": 25,
                                                                            "percent": 25,
                                                                            "description": "VAT"
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                "type": "Administration",
                                                                "description": "Administration fee",
                                                                "amount": 50,
                                                                "taxes": {
                                                                    "items": [
                                                                        {
                                                                            "amount": 12.5,
                                                                            "percent": 25,
                                                                            "description": "VAT"
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "discounts": {
                                                        "items": [
                                                            {
                                                                "type": "Seasonal",
                                                                "description": "Vintage Days campaign",
                                                                "amount": 100,
                                                                "code": "vintagedays"
                                                            }
                                                        ]
                                                    },
                                                    "returnDetails": null,
                                                    "delivery": {
                                                        "method": "DHL",
                                                        "trackingNumber": "1234567890",
                                                        "trackingUri": "https://dhl.com/track/1234567890",
                                                        "deliveryDate": "2025-07-28T09:39:37+02:00"
                                                    },
                                                    "billingAddress": {
                                                        "title": "Mr",
                                                        "firstname": "John",
                                                        "lastname": "Doe",
                                                        "streetAddress": "Main Street 1",
                                                        "streetAddress2": null,
                                                        "postalCode": "12345",
                                                        "region": null,
                                                        "city": "Springfield",
                                                        "country": "US",
                                                        "email": "john@example.com",
                                                        "phone": "+1234567890"
                                                    },
                                                    "deliveryAddress": {
                                                        "title": "Mr",
                                                        "firstname": "John",
                                                        "lastname": "Doe",
                                                        "streetAddress": "Main Street 1",
                                                        "streetAddress2": null,
                                                        "postalCode": "12345",
                                                        "region": null,
                                                        "city": "Springfield",
                                                        "country": "US",
                                                        "email": "john@example.com",
                                                        "phone": "+1234567890"
                                                    },
                                                    "totalPrice": 1647,
                                                    "taxes": {
                                                        "items": [
                                                            {
                                                                "amount": 411.75,
                                                                "percent": 25,
                                                                "description": "VAT"
                                                            }
                                                        ],
                                                        "totalTax": 411.75
                                                    },
                                                    "links": [
                                                        {
                                                            "id": "order-123",
                                                            "href": "https://mytenant.voyado.com/api/v3/orders/order-123",
                                                            "method": "GET",
                                                            "rel": "self"
                                                        }
                                                    ]
                                                }
                                            ],
                                            "totalCount": 1,
                                            "offset": 0,
                                            "count": 1,
                                            "links": [
                                                {
                                                    "href": "https://mytenant.voyado.com/api/v3/orders/?contactId=1b322d05-322c-465e-8918-c12a9e37e893&offset=0&count=10",
                                                    "method": "GET",
                                                    "rel": "previous"
                                                },
                                                {
                                                    "href": "https://mytenant.voyado.com/api/v3/orders/?contactId=1b322d05-322c-465e-8918-c12a9e37e893&offset=10&count=10",
                                                    "method": "GET",
                                                    "rel": "next"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No orders found for contact"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "orders"
                ],
                "summary": "Register new order",
                "description": "Sends a request to create an order. The creation is asynchronous - use the information in the response to follow the progress and catch any errors.",
                "operationId": "Orders_Post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateOrderRequest"
                            }
                        }
                    },
                    "description": "Order object",
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Request has been accepted",
                        "headers": {
                            "Location": {
                                "description": "Location of the job endpoint",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderJob"
                                },
                                "examples": {
                                    "response": {
                                        "value": {
                                            "status": "Accepted",
                                            "jobId": "L263E2VHWYC",
                                            "orderId": "order-123",
                                            "href": "https://mytenant.voyado.com/api/v3/example/jobs/endpoint/for/jobid/L263E2VHWYC"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "409": {
                        "description": "Order already exists"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/orders/{orderId}/action": {
            "post": {
                "tags": [
                    "orders"
                ],
                "summary": "Perform actions on order",
                "description": "Trigger action events for specific order.",
                "operationId": "Orders_PostAction",
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "Unique order identifier by client",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrderActionRequest"
                            }
                        }
                    },
                    "description": "Order action",
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Request has been accepted",
                        "headers": {
                            "Location": {
                                "description": "Location of the job endpoint",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderJob"
                                },
                                "examples": {
                                    "response": {
                                        "value": {
                                            "status": "Accepted",
                                            "jobId": "L263E2VHWYC",
                                            "orderId": "order-123",
                                            "href": "https://mytenant.voyado.com/api/v3/example/jobs/endpoint/for/jobid/L263E2VHWYC"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "Order not found or VersionTag did not match the order"
                    },
                    "422": {
                        "description": "Order has no contact"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/orders/{orderId}/change-status": {
            "post": {
                "tags": [
                    "orders"
                ],
                "summary": "Change status of an existing order",
                "description": "Overwrites the status of an existing order. The change is asynchronous - use the information in the response to follow the progress and catch any errors.",
                "operationId": "Orders_PostStatus",
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "Unique order identifier by client",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChangeOrderStatusRequest"
                            }
                        }
                    },
                    "description": "Status object",
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Request has been accepted",
                        "headers": {
                            "Location": {
                                "description": "Location of the job endpoint",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderJob"
                                },
                                "examples": {
                                    "response": {
                                        "value": {
                                            "status": "Accepted",
                                            "jobId": "L263E2VHWYC",
                                            "orderId": "order-123",
                                            "href": "https://mytenant.voyado.com/api/v3/example/jobs/endpoint/for/jobid/L263E2VHWYC"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/orders/{orderId}/change-delivery": {
            "post": {
                "tags": [
                    "orders"
                ],
                "summary": "Change delivery of an existing order",
                "description": "Overwrites the delivery of an existing order. The change is asynchronous - use the information in the response to follow the progress and catch any errors.",
                "operationId": "Orders_PostDelivery",
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "Unique order identifier by client",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChangeOrderDeliveryRequest"
                            }
                        }
                    },
                    "description": "Delivery object",
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Request has been accepted",
                        "headers": {
                            "Location": {
                                "description": "Location of the job endpoint",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderJob"
                                },
                                "examples": {
                                    "response": {
                                        "value": {
                                            "status": "Accepted",
                                            "jobId": "L263E2VHWYC",
                                            "orderId": "order-123",
                                            "href": "https://mytenant.voyado.com/api/v3/example/jobs/endpoint/for/jobid/L263E2VHWYC"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/personlookup/getpersonlookup": {
            "get": {
                "tags": [
                    "personlookup"
                ],
                "summary": "Get a single contact information by either social security number or mobile phone number.",
                "description": "",
                "operationId": "PersonLookup_GetPersonLookup",
                "parameters": [
                    {
                        "name": "socialSecurityNumber",
                        "in": "query",
                        "description": "String that contains social security number",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "phoneNumber",
                        "in": "query",
                        "description": "String that contains mobile phone number",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "countryCode",
                        "in": "query",
                        "description": "Country where the contact is registered",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContactSearchResult"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContactSearchResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "InvalidPhoneNumber, InvalidSocialSecurityNumber"
                    },
                    "404": {
                        "description": ""
                    },
                    "422": {
                        "description": "ValidationError"
                    },
                    "502": {
                        "description": "NoData"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/point-accounts/{id}": {
            "get": {
                "tags": [
                    "points"
                ],
                "summary": "Get point account by Id",
                "description": "## Response Object\r\n- Id: The unique identifier of the point account.\r\n- Balance: The current balance of the point account.\r\n- BalanceExpires: The date when the balance needs to be recalculated, due to points expiring or becoming active. Balance can increase, decrease or stay the same. It is not recommended to use this field, it is an accidentally exposed implementation detail that will be removed in future versions of the API!\r\n- ContactId: The contact identifier associated with the point account.\r\n- DefinitionId: The definition identifier of the point account.\r\n- PendingPoints: The sum of pending transactions.\r\n- PointsWillExpireDueToInactivity: The date when the points will expire due to inactivity (only applies to expiry method \"Contact inactive\"). If this value is `null` it means that there are no points that will expire due to inactivity, either due to no such points having been earned on this point account, or all of them have already expired.",
                "operationId": "PointAccountV_GetPointAccount",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The Id of the point account",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns point account.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PointAccountModelV3"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PointAccountModelV3"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The account was not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/point-transactions/{id}": {
            "get": {
                "tags": [
                    "points"
                ],
                "summary": "Gets a transaction by the provided transaction id",
                "operationId": "PointTransaction_GetPointTransaction",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Transaction unique id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PointTransactionDto"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PointTransactionDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The transaction was not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/point-accounts": {
            "get": {
                "tags": [
                    "points"
                ],
                "summary": "Get point accounts by contact Id",
                "description": "## Response Object\r\n- Id: The unique identifier of the point account.\r\n- Balance: The current balance of the point account.\r\n- BalanceExpires: The date when the balance needs to be recalculated, due to points expiring or becoming active. Balance can increase, decrease or stay the same. It is not recommended to use this field, it is an accidentally exposed implementation detail that will be removed in future versions of the API!\r\n- ContactId: The contact identifier associated with the point account.\r\n- DefinitionId: The definition identifier of the point account.\r\n- PendingPoints: The sum of pending transactions.\r\n- PointsWillExpireDueToInactivity: The date when the points will expire due to inactivity (only applies to expiry method \"Contact inactive\"). If this value is `null` it means that there are no points that will expire due to inactivity, either due to no such points having been earned on this point account, or all of them have already expired.",
                "operationId": "PointAccountV_GetPointAccounts",
                "parameters": [
                    {
                        "name": "contactId",
                        "in": "query",
                        "description": "The Id of the contact",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns point accounts.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PointAccountModelV3"
                                    }
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PointAccountModelV3"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The account was not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "points"
                ],
                "summary": "Creates a point account for a contact and a point account definition",
                "description": "Gets a list of accounts by contact id\r\n            \r\n## Response Object\r\n- Items: A list of point accounts.\r\n- Offset: The offset of the result set.\r\n- Count: The number of items in the result set.\r\n- TotalCount: The total number of items available.\r\n            \r\nEach point account contains:\r\n- Id: The unique identifier of the point account.\r\n- Balance: The current balance of the point account.\r\n- BalanceExpires: The date when the balance needs to be recalculated, due to points expiring or becoming active. Balance can increase, decrease or stay the same. It is not recommended to use this field, it is an accidentally exposed implementation detail that will be removed in future versions of the API!\r\n- ContactId: The contact identifier associated with the point account.\r\n- DefinitionId: The definition identifier of the point account.\r\n- PendingPoints: The sum of pending transactions.",
                "operationId": "PointAccountV_CreatePointAccount",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreatePointAccountModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Returns created point account.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PointAccountModelV3"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PointAccountModelV3"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The account was not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/point-transactions": {
            "get": {
                "tags": [
                    "points"
                ],
                "summary": "Get point transactions for a specific point account Id.",
                "operationId": "PointTransaction_GetPointTransactions",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Point account unique id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Defaults to 0",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Defaults to 100",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Default TransactionDate",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "TransactionDate",
                                "CreatedOn"
                            ]
                        }
                    },
                    {
                        "name": "sortOrder",
                        "in": "query",
                        "description": "Default Descending",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Ascending",
                                "Descending"
                            ]
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Active, Pending, Expired and All. If not specified the default will be Active.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Active",
                                "Pending",
                                "Expired",
                                "All"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the list of point transactions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PointTransactionDtoResult"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PointTransactionDtoResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The transaction was not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "points"
                ],
                "summary": "Add a point transaction to a point account",
                "description": "## Recommendation\r\n            \r\nThis is the recommended way to add point transactions to a point account. Reasons:\r\n- By adding a single point transaction, failures are easier to handle\r\n- When adding the single point transaction you provide a unique id, which will be used as the idempotency key. This allows retries if you are unsure if the transaction was successfully added.\r\n- When adding the single transaction, the request is accepted quickly and the transaction is processed in the background.\r\n            \r\nIf you want to add multiple transactions at once, you can use the bulk endpoint POST api/[api version]/point-accounts/transactions\r\n            \r\n## Behavior\r\n            \r\nAsynchronously add a point transaction to the point account specified.\r\n            \r\nProvide a globally unique identifier for the transaction, if the transaction already exists then the request will do nothing. This is to prevent duplicate transactions and so that the consumer can retry a request if it fails or unsure if successful.\r\nThe point account must be created before a transaction can be added.",
                "operationId": "PointTransaction_AddPointTransacion",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddPointTransactionRequestModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepts the transaction request for later processing."
                    },
                    "400": {
                        "description": "Invalid request"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/point-accounts/transactions": {
            "post": {
                "tags": [
                    "points"
                ],
                "summary": "Adds Point transactions to the specified accounts for contact members.",
                "description": "## Recommendation\r\n            \r\nThe recommendation is to use POST api/[api version]/point-transactions to add a single transaction instead of using this endpoint. Reasons:\r\n- By adding a single point transaction, failures are easier to handle\r\n- When adding the single point transaction you provide a unique id, which will be used as the idempotency key. This allows retries if you are unsure if the transaction was successfully added.\r\n- When adding the single transaction, the request is accepted quickly and the transaction is processed in the background.\r\n            \r\nWith that said, if you still want to use this endpoint, please be aware of the following:\r\n\r\n## Behavior\r\n            \r\nProvide one or more point transactions to be added to the specified contacts' accounts.\r\nThe point transactions do not need to be added to the same contact.\r\nYou can add up to 1000 transactions in a single request.\r\n            \r\n### Point Transaction fields\r\n\r\n- contactId: Must be a Guid\r\n- amount: The amount of points, negative amounts are accepted.\r\n- definitionId: specifies to which point account each transaction should be sent to\r\n- timeStamp: If not provided then the default value is taken from the requestors system timezone.\r\n- source: Must be provided or else that specified transaction will not be accepted.\r\n- description: Must be provided or else that transaction will not be accepted.\r\n- validFrom: If not provided then the default value is taken from the requestors system timezone.\r\n- validTo: Specifies how long the points are valid\r\n- expireAfterMonthsInactive: Specifies how long the points are valid after the account has been inactive.\r\n            \r\n### Important info\r\n            \r\nIf any of the transactions are correct, the response will be Accepted. You need to ensure that the NotAccepted list in the response is empty to know that all transactions were added correctly.\r\n            \r\n### Idempotency-Key\r\n\r\nThe idempotency key is a unique identifier included in the header of an HTTP request to ensure the idempotence of certain operations. An idempotent operation is one that produces the same result regardless of how many times it is executed with the same input.\r\n\r\n#### Purpose\r\n\r\nThe primary purpose of the idempotency key is to enable safe retries of requests. In situations where a client needs to resend a request due to network issues or other transient failures, the idempotency key helps prevent unintended side effects by ensuring that repeated requests with the same key result in the same outcome.",
                "operationId": "PointAccount_AddPointTransactions",
                "parameters": [
                    {
                        "name": "Idempotency-Key",
                        "in": "header",
                        "description": "Optional, lasts for 24 hours",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PointTransactionToAccount"
                                }
                            }
                        }
                    },
                    "description": "The JSON object which contains the point transactions.",
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "The request is accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PointTransactionToAccountResultModel"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PointTransactionToAccountResultModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Too many items, New point system not active"
                    },
                    "504": {
                        "description": "GatewayTimeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiExceptionResponse"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiExceptionResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/point-shop-items": {
            "get": {
                "tags": [
                    "point-shop-items"
                ],
                "summary": "Get all point shop items.",
                "operationId": "PointShopItem_GetPointShopItems",
                "responses": {
                    "200": {
                        "description": "Returns the list of point shop items.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PointShopItemResponse"
                                    }
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PointShopItemResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "point-shop-items"
                ],
                "summary": "Create point shop item.",
                "operationId": "PointShopItem_CreatePointShopItem",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PointShopItemRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Point shop item created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PointShopItemResponse"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PointShopItemResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "point-shop-items"
                ],
                "summary": "Remove a point shop item by id.",
                "operationId": "PointShopItem_RemovePointShopItem",
                "parameters": [
                    {
                        "name": "pointShopItemId",
                        "in": "query",
                        "description": "Id of point shop item to remove",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Point shop item NotFound",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/point-shop-items/purchase": {
            "post": {
                "tags": [
                    "point-shop-items"
                ],
                "summary": "Purchase a point shop item.",
                "operationId": "PointShopItem_PurchasePointShopItem",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PurchasePointShopItemRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "BadRequest",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "NotFound",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/promotions/multichannels/{id}": {
            "get": {
                "tags": [
                    "promotions"
                ],
                "summary": "Get multichannel promotion by id",
                "description": "Gets the multichannel promotion with the identifier which is set by Voyado",
                "operationId": "MultichannelPromotions_GetById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Promotion identifier from Voyado",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MultichannelPromotionModel"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MultichannelPromotionModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing value for parameter 'id'",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestMessageSwaggerModel"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestMessageSwaggerModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Promotion not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResult"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResult"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExceptionResponseContent"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExceptionResponseContent"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "promotions"
                ],
                "summary": "Delete multichannel promotion by id",
                "description": "Only unassigned multichannel promotions can be deleted",
                "operationId": "MultichannelPromotions_DeleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Voyado identifier to a multichannel promotion",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StatusCodeResult"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StatusCodeResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Promotion can not be deleted because it is locked.\r\n                                                     Promotion can not be deleted because it has been redeemed.\r\n                                                     Promotion can not be deleted because it is assigned to someone.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestMessageSwaggerModel"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestMessageSwaggerModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Promotion not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResult"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResult"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExceptionResponseContent"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExceptionResponseContent"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/promotions/multichannels/{promotionId}/validity": {
            "get": {
                "tags": [
                    "promotions"
                ],
                "summary": "Get multichannel promotion validity by id",
                "description": "Gets the multichannel promotion with the identifier which is an internal reference for Voyado",
                "operationId": "MultichannelPromotions_GetValidityById",
                "parameters": [
                    {
                        "name": "promotionId",
                        "in": "path",
                        "description": "Identifier inside of Voyado",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PromotionValidityModel"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PromotionValidityModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing value for parameter 'promotionId'",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestMessageSwaggerModel"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestMessageSwaggerModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Promotion not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResult"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResult"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExceptionResponseContent"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExceptionResponseContent"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/promotions/multichannels": {
            "get": {
                "tags": [
                    "promotions"
                ],
                "summary": "Get multichannel promotion by external id",
                "description": "Gets the multichannel promotion with the identifier which is an external reference for Voyado",
                "operationId": "MultichannelPromotions_GetByExternalId",
                "parameters": [
                    {
                        "name": "externalId",
                        "in": "query",
                        "description": "External identifier outside of Voyado",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MultichannelPromotionModel"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MultichannelPromotionModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing value for parameter 'externalId'",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestMessageSwaggerModel"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestMessageSwaggerModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Promotion not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResult"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResult"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExceptionResponseContent"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExceptionResponseContent"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "promotions"
                ],
                "summary": "Create a new multichannel promotion",
                "description": "Only creates multichannel promotion in status 'Draft'.",
                "operationId": "MultichannelPromotions_Create",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MultichannelBasePromotionModel"
                            }
                        }
                    },
                    "description": "Multichannel promotion to save",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MultichannelPromotionModel"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MultichannelPromotionModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestMessageSwaggerModel"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestMessageSwaggerModel"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExceptionResponseContent"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExceptionResponseContent"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "promotions"
                ],
                "summary": "Delete multichannel promotion by external id",
                "description": "Only unassigned multichannel promotions can be deleted",
                "operationId": "MultichannelPromotions_DeleteByExternalId",
                "parameters": [
                    {
                        "name": "externalId",
                        "in": "query",
                        "description": "External identifier to a multichannel promotion",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StatusCodeResult"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StatusCodeResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Promotion can not be deleted because it is locked. \r\n                                                     Promotion can not be deleted because it has been redeemed.\r\n                                                     Promotion can not be deleted because it is assigned to someone.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestMessageSwaggerModel"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestMessageSwaggerModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Promotion not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResult"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResult"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExceptionResponseContent"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExceptionResponseContent"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/promotions/multichannels/validity": {
            "get": {
                "tags": [
                    "promotions"
                ],
                "summary": "Get multichannel promotion validity by external id",
                "description": "Gets the multichannel promotion validity with the identifier which is an external reference for Voyado",
                "operationId": "MultichannelPromotions_GetByValidityExternalId",
                "parameters": [
                    {
                        "name": "externalId",
                        "in": "query",
                        "description": "External identifier outside of Voyado",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PromotionValidityModel"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PromotionValidityModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing value for parameter 'externalId'.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestMessageSwaggerModel"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestMessageSwaggerModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Promotion not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResult"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResult"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExceptionResponseContent"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExceptionResponseContent"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/promotion-assignments": {
            "get": {
                "tags": [
                    "promotions"
                ],
                "summary": "Get available multichannel promotions assigned to a contact.",
                "description": "To filter on redemptionChannelType add it as a query string\r\n?redemptionChannelType=POS\r\nIt can be POS, ECOM or OTHER",
                "operationId": "PromotionAssignments_GetActivePromotionAssignmentsForContactAsync",
                "parameters": [
                    {
                        "name": "contactId",
                        "in": "query",
                        "description": "Contact identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "redemptionChannelType",
                        "in": "query",
                        "description": "Filter on redemptionChannelType it can be POS, ECOM or OTHER",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ApiPromotionModel"
                                    }
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ApiPromotionModel"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "promotions"
                ],
                "summary": "Assign a multichannel promotion to a contact",
                "operationId": "PromotionAssignments_Assign",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssignPromotionModel"
                            }
                        }
                    },
                    "description": "Object with ContactId and PromotionId",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "InvalidContactId, InvalidPromotionId"
                    },
                    "404": {
                        "description": "ContactNotFound, PromotionNotFound"
                    },
                    "409": {
                        "description": "PromotionExpired"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/promotions/multichannels/{id}/validity": {
            "put": {
                "tags": [
                    "promotions"
                ],
                "summary": "Updates validity for an existing multichannel promotion",
                "description": "Updates duration of an existing multichannel promotion.\r\nOnly multichannel promotion in status 'Draft' can be updated.",
                "operationId": "MultichannelPromotions_UpdateValidity",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Voyado multichannel promotion identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PromotionValidityModel"
                            }
                        }
                    },
                    "description": "Validity of promotion to update",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MultichannelPromotionModel"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MultichannelPromotionModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidModelStateSwaggerModel"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidModelStateSwaggerModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "NotFound",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResult"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResult"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExceptionResponseContent"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExceptionResponseContent"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/promotions/multichannels/{promotionId}": {
            "put": {
                "tags": [
                    "promotions"
                ],
                "summary": "Updates an existing multichannel promotion",
                "description": "Updates an existing multichannel promotion.\r\nOnly multichannel promotion in status 'Draft' can be updated.",
                "operationId": "MultichannelPromotions_Update",
                "parameters": [
                    {
                        "name": "promotionId",
                        "in": "path",
                        "description": "Voyado multichannel promotion identifier",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MultichannelPromotionModel"
                            }
                        }
                    },
                    "description": "Multichannel promotion to update",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MultichannelPromotionModel"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MultichannelPromotionModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidModelStateSwaggerModel"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidModelStateSwaggerModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "NotFound",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResult"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResult"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable, promotion has other status than 'Draft'.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StatusCodeResult"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StatusCodeResult"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExceptionResponseContent"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExceptionResponseContent"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/promotion-assignments/{assignmentId}/redeem": {
            "post": {
                "tags": [
                    "promotions"
                ],
                "summary": "Redeem promotion assignment",
                "description": "Redeem a multichannel offer promotion for a contact using the internal promotion assignment Id\r\n            \r\nRedemption channel can be POS, ECOM or OTHER.",
                "operationId": "PromotionAssignments_RedeemByPromotionAssignmentIdAsync",
                "parameters": [
                    {
                        "name": "assignmentId",
                        "in": "path",
                        "description": "The id of the promotion assignment",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RedeemBodyModel"
                            }
                        }
                    },
                    "description": "The channel where the promotion was used",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "InvalidPromotionAssignmentId, NotAValidRedemptionChannel",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiExceptionResponse"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiExceptionResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "PromotionNotFound",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiExceptionResponse"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiExceptionResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "PromotionAlreadyRedeemed, PromotionNotValidForRedemptionChannel",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiExceptionResponse"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiExceptionResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "GatewayTimeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiExceptionResponse"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiExceptionResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/reward-vouchers": {
            "get": {
                "tags": [
                    "reward-vouchers"
                ],
                "summary": "Get all reward vouchers for a contact. Expired, redeemed and available",
                "description": "Get all reward vouchers for a contact. Expired, redeemed and available.\r\nThe result can be paginated, using the offset and\r\ncount query parameters.",
                "operationId": "RewardVouchers_GetRewardVouchersForContact",
                "parameters": [
                    {
                        "name": "contactId",
                        "in": "query",
                        "description": "Contact identifier (GUID).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The first item to retrieve. (Default value 0)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The max number of items to retrieve. (Default value 100)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagedResultOfAllRewardVoucherModel"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagedResultOfAllRewardVoucherModel"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/reward-vouchers/redeemed": {
            "get": {
                "tags": [
                    "reward-vouchers"
                ],
                "summary": "Get redeemed reward vouchers for a contact.",
                "description": "Get redeemed reward vouchers for a contact.\r\nThe result can be paginated, using the offset and\r\ncount query parameters.",
                "operationId": "RewardVouchers_GetRedeemedRewardVouchersForContact",
                "parameters": [
                    {
                        "name": "contactId",
                        "in": "query",
                        "description": "Contact identifier (GUID).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The first item to retrieve. (Default value 0)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The max number of items to retrieve. (Default value 100)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagedResultOfRedeemedRewardVoucherModel"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagedResultOfRedeemedRewardVoucherModel"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/reward-vouchers/available": {
            "get": {
                "tags": [
                    "reward-vouchers"
                ],
                "summary": "Get available reward vouchers.",
                "description": "Get available reward vouchers for a contact.\r\n            \r\nExpired and redeemed reward vouchers are excluded\r\n            \r\nThe result can be paginated, using the *offset*\r\nand *count* query parameters.",
                "operationId": "RewardVouchers_GetAvailableRewardVouchers",
                "parameters": [
                    {
                        "name": "contactId",
                        "in": "query",
                        "description": "Contact identifier (GUID).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Number of items to skip. (Default value 0)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Max number of items to take. (Default value 100)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagedResultOfAvailableRewardVoucherModel"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagedResultOfAvailableRewardVoucherModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "ContactNotFound",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiExceptionResponse"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiExceptionResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/reward-vouchers/{rewardVoucherId}/redeem": {
            "post": {
                "tags": [
                    "reward-vouchers"
                ],
                "summary": "Redeem a reward voucher.",
                "description": "Redeem an active reward voucher with a provided identifier.",
                "operationId": "RewardVouchers_RedeemRewardVoucher",
                "parameters": [
                    {
                        "name": "rewardVoucherId",
                        "in": "path",
                        "description": "RewardVoucher identifier (GUID).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RedeemedRewardVoucherModel"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RedeemedRewardVoucherModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "InvalidRewardVoucherId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiExceptionResponse"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiExceptionResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "RewardVoucherNotFound",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiExceptionResponse"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiExceptionResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "RewardVoucherAlreadyRedeemed, RewardVoucherExpired",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiExceptionResponse"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiExceptionResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "GatewayTimeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiExceptionResponse"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiExceptionResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/reward-vouchers/{rewardVoucherId}/reactivate": {
            "post": {
                "tags": [
                    "reward-vouchers"
                ],
                "summary": "Reactivate a redeemed reward voucher",
                "description": "Reactivate a redeemed reward voucher with a provided identifier",
                "operationId": "RewardVouchers_ReactivateRewardVoucher",
                "parameters": [
                    {
                        "name": "rewardVoucherId",
                        "in": "path",
                        "description": "RewardVoucher identifier (GUID).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReactivatedRewardVoucherModel"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReactivatedRewardVoucherModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "InvalidRewardVoucherId",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiExceptionResponse"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiExceptionResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "RewardVoucherNotFound",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiExceptionResponse"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiExceptionResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "RewardVoucherAlreadyActivated, RewardVoucherExpired, ReactivationLimitExceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiExceptionResponse"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiExceptionResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/sms/sendToPhoneNumbers": {
            "post": {
                "tags": [
                    "sms"
                ],
                "summary": "Send SMS to multiple phone numbers.",
                "description": "Send an SMS to one or multiple phone numbers. \r\n\r\nPhone numbers must be prefixed with a + and country code\r\n(e.g. +4670xxxxxxx for a Swedish mobile phone number).",
                "operationId": "SmsMessages_SendSmsToPhoneNumbers",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SendSmsRequest"
                            }
                        }
                    },
                    "description": "Message data.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SendSmsResponse"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SendSmsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "NoData, NoRecipients, InvalidPhoneNumber"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/stores": {
            "get": {
                "tags": [
                    "stores"
                ],
                "summary": "Gets all the stores.",
                "operationId": "StoresV_GetStores",
                "parameters": [
                    {
                        "name": "includeInactive",
                        "in": "query",
                        "description": "Value indicating if the inactive stores should be included or not. (Default value = false)",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ApiStore"
                                    }
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ApiStore"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "stores"
                ],
                "summary": "Creates a store.",
                "operationId": "StoresV_CreateStore",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiStore"
                            }
                        }
                    },
                    "description": "The store object to create.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiStore"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiStore"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "InvalidStore, InvalidTimeZone"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/stores/{externalId}": {
            "get": {
                "tags": [
                    "stores"
                ],
                "summary": "Gets a single store.",
                "operationId": "StoresV_GetStore",
                "parameters": [
                    {
                        "name": "externalId",
                        "in": "path",
                        "description": "The external id of the store to get.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "includeInactive",
                        "in": "query",
                        "description": "Value indicating if the store can be inactive or not. (Default value = false)",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiStore"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiStore"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "MoreThanOneStoreFound"
                    },
                    "404": {
                        "description": "StoreNotFound"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "stores"
                ],
                "summary": "Updates a store.",
                "description": "Updates a store. externalId is the store identifier.",
                "operationId": "StoresV_UpdateStore",
                "parameters": [
                    {
                        "name": "externalId",
                        "in": "path",
                        "description": "The external id of the store to update.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiStore"
                            }
                        }
                    },
                    "description": "The store object to update.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiStore"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiStore"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "InvalidStore, MoreThanOneStoreFound, InvalidTimeZone"
                    },
                    "404": {
                        "description": "StoreNotFound"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/target-audiences": {
            "get": {
                "tags": [
                    "target-audiences"
                ],
                "summary": "Get all target audiences",
                "operationId": "TargetAudience_GetTargetAudiences",
                "responses": {
                    "200": {
                        "description": "List of all target audiences",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/IdName"
                                    }
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/IdName"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExceptionResponseContent"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExceptionResponseContent"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/tracking/carts": {
            "post": {
                "tags": [
                    "tracking"
                ],
                "summary": "Register a collection of cart updates",
                "description": "Register a batch of cart updates. Cart updates are processed according to update time. If multiple cart updates are registered with the same identifier only the latest update (according to update time) is considered.\r\n            \r\nRequest model:\r\n- CartReference: Unique identifier of the cart. Links the update to a specific cart. Ex: \"006788ba-9f65-49c6-b3a0-2315d1854728\"\r\n- Time: Time of the cart update. ISO8601 with Time Zone Designators. Ex: \"2021-09-22T11:00:00+02:00\"\r\n- ContactId: Contact id of the cart owner. GUID or short GUID. Ex: \"ae16a9b4-f581-4568-8948-a96100b2afd4\"\r\n- SessionId: Unique identifier of the session. Ex: \"3b7e493b-5dfe-4b98-b6cf-049f2ea4309d\"\r\n- NewSession: Boolean value that indicates that new session.\r\n- Language: Culture code of the cart. A corresponding product feed should be configured. Ex: \"sv-SE\"\r\n- Url: Url to the cart. Ex: \"https://www.store.se/cart?id=006788ba-9f65-49c6-b3a0-2315d1854728\"\r\n- Items: Collection of cart items. Ex: \"[{\"Sku\":\"90183744\",\"Quantity\":1},{\"Sku\":\"90156607\",\"Quantity\":1}]\"\r\n- ExternalReferrer: The external site that the user came from (clicked a link) Ex: \"https://www.google.com\"\r\n- Utm: Collection of Key Value paired UTM tags",
                "operationId": "Cart_RegisterCarts",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Cart"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "BadRequest",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidModelStateResult"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidModelStateResult"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/tracking/productviews": {
            "post": {
                "tags": [
                    "tracking"
                ],
                "summary": "Register a collection of views to specific products for given contacts",
                "description": "Register a collection of views to specific products for given contacts.\r\n            \r\nRequest model:\r\n- ItemId: Unique SKU/Article Id/Item Id of the viewed product. Will be matched against SKU on the imported articles in Voyado. Ex: \"123XYZ\"\r\n- Category: Category of the product on the website. Will be used for filtering. Ex: \"novels &gt; cormac mccarthy &gt; the road\"\r\n- Time: Time of the product view. ISO8601 with Time Zone Designators. Ex: \"2021-09-22T11:00:00+02:00\"\r\n- ContactId: Contact id of the viewer. GUID or short GUID. Ex: \"FF9FD9AF-6778-4714-B0FE-F6E6612840C8\"\r\n- SessionId: Unique identifier of the session. Ex: \"3b7e493b-5dfe-4b98-b6cf-049f2ea4309d\"\r\n- NewSession: Boolean value that indicates that new session.\r\n- Language: Culture code of the cart. A corresponding product feed should be configured. Ex: \"sv-SE\"\r\n- Url: Url of the productview. Ex: \"https://www.voyado.com?sku=eu901-011-v10\"\r\n- ExternalReferrer: The external site that the user came from (clicked a link) Ex: \"https://www.google.com\"\r\n- Utm: Collection of Key Value paired UTM tags",
                "operationId": "ProductView_RegisterProductViews",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ProductView"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "BadRequest",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidModelStateResult"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvalidModelStateResult"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/transactions": {
            "get": {
                "tags": [
                    "transactions"
                ],
                "summary": "Get transactions for a contact.",
                "description": "Retrieves transactions for a contact. Each line item includes article data \r\nfetched from articles based on the SKU, if available.\r\nSupports pagination with offset and count parameters.",
                "operationId": "Transactions_GetTransactionsWithArticlesByContactId",
                "parameters": [
                    {
                        "name": "contactId",
                        "in": "query",
                        "description": "Contact identifier (GUID).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Number of transactions to skip. (Default 0)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Maximum number of transactions to return. (Default 100)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagedResultOfTransactionItemWithArticlesResponse"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagedResultOfTransactionItemWithArticlesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "InvalidContactId"
                    },
                    "404": {
                        "description": "ContactNotFound"
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        },
        "/api/v3/receipts": {
            "post": {
                "tags": [
                    "transactions"
                ],
                "summary": "Imports receipts (transactions)",
                "description": "The /receipts endpoint is used to store each customers purchase and returns in Engage.\r\nAll fields in the data model can be used for segmentation and analysis in Engage.\r\nIf you want to send out transactional emails, use the /orders endpoint instead.\r\n\r\n### Identification\r\n\r\nTo be able to store a receipt in Voyado, you need to connect it to a specific \r\ncontact.\r\n\r\nIn the example payload below the contact type is “Member” and the key type is “email” \r\nThe key has to be a unique data field for the specific contact type, \r\nnormally one of these fields:\r\n- contactId\r\n- email\r\n- mobilePhone\r\n- memberNumber\r\n- externalId\r\n- personal identity number - only Swedish or Finnish",
                "operationId": "ImportTransactions_ImportReceipts",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ImportReceiptRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            },
                            "application/problem+json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apikey": []
                    }
                ]
            }
        }
    },
    "servers": [
        {
            "url": "https://revidetestar.acceptanstest.eclub.se"
        }
    ],
    "components": {
        "requestBodies": {
            "Achievements_SetAchievementValue": {
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "required": true
            }
        },
        "securitySchemes": {
            "apikey": {
                "type": "apiKey",
                "description": "API Key Authentication",
                "name": "apikey",
                "in": "header"
            }
        },
        "schemas": {
            "ApiAchievementValue": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "date": {
                        "format": "date-time",
                        "type": "string"
                    }
                }
            },
            "PagedResultOfApiAchievementDefinition": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApiAchievementDefinition"
                        }
                    },
                    "totalCount": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "offset": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "count": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "ApiAchievementDefinition": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "metaData": {
                        "type": "object"
                    }
                }
            },
            "EnrichmentVariableGroup": {
                "description": "Grouped BCI enrichment varioables",
                "type": "object",
                "properties": {
                    "bciGroupId": {
                        "description": "BCI group identifier",
                        "type": "string"
                    },
                    "groupName": {
                        "description": "Group name in Voyado",
                        "type": "string"
                    },
                    "variables": {
                        "description": "Variables in group",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EnrichmentVariable"
                        }
                    }
                },
                "example": {
                    "BciGroupId": "housing",
                    "GroupName": "Hushåll",
                    "Variables": [
                        {
                            "BciVariableId": "housing.ownsVacationHome",
                            "BciValue": "0",
                            "Value": "Nej",
                            "Precision": "Address"
                        },
                        {
                            "BciVariableId": "housing.housingOwner",
                            "Precision": "Address"
                        }
                    ]
                }
            },
            "EnrichmentVariable": {
                "description": "An enrichment value for a certain BCI variable",
                "type": "object",
                "properties": {
                    "bciVariableId": {
                        "description": "BCI variable identifier",
                        "type": "string"
                    },
                    "bciValue": {
                        "description": "BCI Value",
                        "type": "string"
                    },
                    "variableName": {
                        "description": "Variable name in Voyado",
                        "type": "string"
                    },
                    "value": {
                        "description": "Mapped value in Voyado",
                        "type": "string"
                    },
                    "precision": {
                        "description": "Value precision from BCI",
                        "type": "string"
                    }
                }
            },
            "NotFoundResult": {
                "type": "object",
                "properties": {
                    "request": {
                        "type": "object",
                        "readOnly": true
                    }
                }
            },
            "CancellationToken": {
                "type": "object",
                "properties": {
                    "isCancellationRequested": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "canBeCanceled": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "waitHandle": {
                        "$ref": "#/components/schemas/WaitHandle"
                    }
                }
            },
            "WaitHandle": {
                "type": "object",
                "properties": {
                    "handle": {
                        "type": "object"
                    },
                    "safeWaitHandle": {
                        "$ref": "#/components/schemas/SafeWaitHandle"
                    }
                }
            },
            "SafeWaitHandle": {
                "type": "object",
                "properties": {
                    "isInvalid": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "isClosed": {
                        "type": "boolean",
                        "readOnly": true
                    }
                }
            },
            "ChallengeCheckPointModel": {
                "type": "object",
                "properties": {
                    "definitionId": {
                        "format": "uuid",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "contactId": {
                        "format": "uuid",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "checkpointAmount": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "AddCheckpointResultExample": {
                "type": "object",
                "properties": {}
            },
            "ApiConsentDefinition": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "metaData": {
                        "type": "object"
                    }
                }
            },
            "ApiContactOverviewSearchQueryData": {
                "type": "object",
                "properties": {
                    "contactType": {
                        "type": "string"
                    },
                    "contactId": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "socialSecurityNumber": {
                        "type": "string"
                    },
                    "mobilePhone": {
                        "type": "string"
                    },
                    "customKey": {
                        "type": "string"
                    },
                    "any": {
                        "type": "string"
                    }
                }
            },
            "IApiContact": {
                "type": "object",
                "properties": {
                    "id": {
                        "format": "uuid",
                        "type": "string",
                        "readOnly": true,
                        "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "readOnly": true
                    },
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "readOnly": true
                    },
                    "preferences": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "readOnly": true
                    },
                    "consents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IApiConsent"
                        },
                        "readOnly": true
                    }
                },
                "example": {
                    "id": "string",
                    "attributes": {
                        "firstName": "John",
                        "lastName": "Doe",
                        "street": "Example Avenue 12",
                        "zipCode": "string",
                        "city": "Examplecity",
                        "email": "john.doe@example.com",
                        "mobilePhone": "+46700111222",
                        "careOf": "careOf",
                        "countryCode": "SE",
                        "birthDay": "2005-07-25",
                        "socialSecurityNumber": "192403282433",
                        "country": "Sverige",
                        "gender": "Female",
                        "age": 65,
                        "externalId": "externalId",
                        "countryName": "countryName",
                        "children": [
                            "2017-01-01",
                            "2015-01-01"
                        ],
                        "rfm": 123.45,
                        "extID": 12345,
                        "intTest": 65,
                        "childrenList": [
                            "2017-01-01",
                            "2015-01-01"
                        ],
                        "testGjortTest": true,
                        "testDateSkintest": "2025-07-25T09:39:37+02:00",
                        "mbetest2": "mbetest2",
                        "dateTimeTest": "2025-07-25T09:39:37+02:00",
                        "dateTest": "2025-07-25T09:39:37+02:00",
                        "testCheckboxMultiple": [
                            "ja",
                            "nej",
                            "kanske"
                        ],
                        "testDropdown": "string",
                        "discoveryKey": "dc85ba08-a3c3-4345-b84d-76df778c9be1",
                        "exportTest": "exportTest",
                        "testCheckBox": true,
                        "testString": "testString",
                        "testNewSequence": 12345,
                        "lang": "en",
                        "memberNumber": 12345
                    },
                    "meta": {},
                    "preferences": {
                        "AcceptsEmail": false,
                        "AcceptsPostal": false,
                        "AcceptsSms": false
                    },
                    "consents": [
                        {
                            "id": "memberTerms",
                            "value": true,
                            "date": "2025-07-25T09:39:38.7208416+02:00",
                            "source": "string",
                            "comment": "string"
                        },
                        {
                            "id": "testsamtycke",
                            "value": true,
                            "date": "2025-07-25T09:39:38.7208416+02:00",
                            "source": "string",
                            "comment": "string"
                        },
                        {
                            "id": "dbconsent",
                            "value": true,
                            "date": "2025-07-25T09:39:38.7208416+02:00",
                            "source": "string",
                            "comment": "string"
                        },
                        {
                            "id": "isContactConsentRequired",
                            "value": true,
                            "date": "2025-07-25T09:39:38.7208416+02:00",
                            "source": "string",
                            "comment": "string"
                        },
                        {
                            "id": "tESTARCONSENT",
                            "value": true,
                            "date": "2025-07-25T09:39:38.7208416+02:00",
                            "source": "string",
                            "comment": "string"
                        }
                    ]
                }
            },
            "IApiConsent": {
                "type": "object",
                "properties": {
                    "comment": {
                        "type": "string"
                    },
                    "date": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "source": {
                        "type": "string"
                    },
                    "value": {
                        "type": "boolean"
                    }
                }
            },
            "contactAttributes": {
                "title": "contactAttributes",
                "example": {
                    "firstName": "John",
                    "lastName": "Doe",
                    "street": "Example Avenue 12",
                    "zipCode": "string",
                    "city": "Examplecity",
                    "email": "john.doe@example.com",
                    "mobilePhone": "+46700111222",
                    "careOf": "careOf",
                    "countryCode": "SE",
                    "birthDay": "2005-07-25",
                    "socialSecurityNumber": "196006055773",
                    "gender": "Female",
                    "age": 65,
                    "extID": 12345,
                    "intTest": 65,
                    "childrenList": [
                        "2017-01-01",
                        "2015-01-01"
                    ],
                    "testGjortTest": true,
                    "testDateSkintest": "2025-07-25T09:39:37+02:00",
                    "dateTest": "2025-07-25T09:39:37+02:00",
                    "testCheckboxMultiple": [
                        "ja",
                        "nej",
                        "kanske"
                    ],
                    "testDropdown": "string",
                    "testCheckBox": true,
                    "testString": "testString",
                    "lang": "en",
                    "meta": {},
                    "preferences": {
                        "acceptsEmail": false,
                        "acceptsPostal": false,
                        "acceptsSms": false
                    },
                    "consents": [
                        {
                            "id": "memberTerms",
                            "value": true,
                            "date": "2025-07-25T09:39:37.4544465+02:00",
                            "source": "string",
                            "comment": "string"
                        },
                        {
                            "id": "testsamtycke",
                            "value": true,
                            "date": "2025-07-25T09:39:37.4544465+02:00",
                            "source": "string",
                            "comment": "string"
                        },
                        {
                            "id": "dbconsent",
                            "value": true,
                            "date": "2025-07-25T09:39:37.4544465+02:00",
                            "source": "string",
                            "comment": "string"
                        }
                    ]
                }
            },
            "ProductRecommendationsModel": {
                "type": "object",
                "properties": {
                    "skus": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "PurchaseHistorySummary": {
                "type": "object",
                "properties": {
                    "lastUpdated": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "purchaseAmountAll": {
                        "format": "double",
                        "type": "number"
                    },
                    "numberOfArticlePurchasesAll": {
                        "format": "double",
                        "type": "number"
                    },
                    "averageReceiptAll": {
                        "format": "double",
                        "type": "number"
                    },
                    "latestReceiptDate": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "purchaseFrequencyAll": {
                        "format": "double",
                        "type": "number"
                    },
                    "purchaseAmountLastYear": {
                        "format": "double",
                        "type": "number"
                    },
                    "numberOfArticlePurchasesLastYear": {
                        "format": "double",
                        "type": "number"
                    },
                    "averageReceiptLastYear": {
                        "format": "double",
                        "type": "number"
                    },
                    "purchaseFrequencyLastYear": {
                        "format": "double",
                        "type": "number"
                    },
                    "purchaseAmountLastTwoYears": {
                        "format": "double",
                        "type": "number"
                    },
                    "numberOfArticlePurchasesLastTwoYears": {
                        "format": "double",
                        "type": "number"
                    },
                    "averageReceiptLastTwoYears": {
                        "format": "double",
                        "type": "number"
                    },
                    "purchaseFrequencyLastTwoYears": {
                        "format": "double",
                        "type": "number"
                    }
                },
                "example": {
                    "lastUpdated": "2025-07-25T09:39:37.4856363+02:00",
                    "purchaseAmountAll": 2119.26,
                    "numberOfArticlePurchasesAll": 3,
                    "averageReceiptAll": 2119.26,
                    "latestReceiptDate": "2023-07-25T09:39:37.4856363+02:00",
                    "purchaseFrequencyAll": 1,
                    "purchaseAmountLastYear": 0,
                    "numberOfArticlePurchasesLastYear": 0,
                    "averageReceiptLastYear": 0,
                    "purchaseFrequencyLastYear": 1,
                    "purchaseAmountLastTwoYears": 2119.26,
                    "numberOfArticlePurchasesLastTwoYears": 3,
                    "averageReceiptLastTwoYears": 2119.26,
                    "purchaseFrequencyLastTwoYears": 2119.26
                }
            },
            "ListResultOfApiMessage": {
                "type": "object",
                "properties": {
                    "count": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApiMessage"
                        }
                    }
                }
            },
            "ApiMessage": {
                "type": "object",
                "properties": {
                    "messageId": {
                        "format": "uuid",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "name": {
                        "type": "string"
                    },
                    "sendDateTime": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "source": {
                        "type": "string"
                    },
                    "isTransactional": {
                        "type": "boolean"
                    },
                    "status": {
                        "type": "string"
                    },
                    "messageLink": {
                        "type": "string"
                    },
                    "messageText": {
                        "type": "string"
                    }
                }
            },
            "ApiContactIdSearchQueryData": {
                "type": "object",
                "properties": {
                    "contactType": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "socialSecurityNumber": {
                        "type": "string"
                    },
                    "mobilePhone": {
                        "type": "string"
                    },
                    "customKey": {
                        "type": "string"
                    },
                    "any": {
                        "type": "string"
                    }
                }
            },
            "ApiExceptionMultipleMatchesResponse": {
                "type": "object",
                "properties": {
                    "errorCode": {
                        "type": "string",
                        "readOnly": true
                    },
                    "messageDetails": {
                        "$ref": "#/components/schemas/MultipleMatchesMessageDetails"
                    },
                    "message": {
                        "type": "string",
                        "readOnly": true
                    },
                    "requestId": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "MultipleMatchesMessageDetails": {
                "type": "object",
                "properties": {
                    "multipleMatchesFound": {
                        "type": "array",
                        "items": {
                            "format": "uuid",
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        }
                    }
                }
            },
            "contactCreateBulkExample": {
                "title": "contactCreateBulkExample",
                "example": [
                    {
                        "firstName": "John",
                        "lastName": "Doe",
                        "street": "Example Avenue 12",
                        "zipCode": "string",
                        "city": "Examplecity",
                        "email": "john.doe@example.com",
                        "mobilePhone": "+46700111222",
                        "careOf": "careOf",
                        "countryCode": "SE",
                        "birthDay": "2005-07-25",
                        "socialSecurityNumber": "191303169724",
                        "gender": "Female",
                        "age": 65,
                        "rfm": 123.45,
                        "extID": 12345,
                        "intTest": 65,
                        "childrenList": [
                            "2017-01-01",
                            "2015-01-01"
                        ],
                        "testGjortTest": true,
                        "testDateSkintest": "2025-07-25T09:39:37+02:00",
                        "dateTest": "2025-07-25T09:39:37+02:00",
                        "testCheckboxMultiple": [
                            "ja",
                            "nej",
                            "kanske"
                        ],
                        "testDropdown": "string",
                        "testCheckBox": true,
                        "testString": "testString",
                        "lang": "en",
                        "registrationStoreId": "storeExternalId",
                        "currentStoreExternalId": "storeExternalId",
                        "labels": "lableName1,lableName2"
                    },
                    {
                        "firstName": "John",
                        "lastName": "Doe",
                        "street": "Example Avenue 12",
                        "zipCode": "string",
                        "city": "Examplecity",
                        "email": "john.doe@example.com",
                        "mobilePhone": "+46700111222",
                        "careOf": "careOf",
                        "countryCode": "SE",
                        "birthDay": "2005-07-25",
                        "socialSecurityNumber": "191303169724",
                        "gender": "Female",
                        "age": 65,
                        "rfm": 123.45,
                        "extID": 12345,
                        "intTest": 65,
                        "childrenList": [
                            "2017-01-01",
                            "2015-01-01"
                        ],
                        "testGjortTest": true,
                        "testDateSkintest": "2025-07-25T09:39:37+02:00",
                        "dateTest": "2025-07-25T09:39:37+02:00",
                        "testCheckboxMultiple": [
                            "ja",
                            "nej",
                            "kanske"
                        ],
                        "testDropdown": "string",
                        "testCheckBox": true,
                        "testString": "testString",
                        "lang": "en",
                        "registrationStoreId": "storeExternalId",
                        "currentStoreExternalId": "storeExternalId",
                        "labels": "lableName1,lableName2"
                    }
                ]
            },
            "contactUpdateBulkExample": {
                "title": "contactUpdateBulkExample",
                "example": [
                    {
                        "contactId": "2a299c01-cb9a-4365-aba4-10242ab9571c",
                        "firstName": "John",
                        "lastName": "Doe",
                        "street": "Example Avenue 12",
                        "zipCode": "string",
                        "city": "Examplecity",
                        "email": "john.doe@example.com",
                        "mobilePhone": "+46700111222",
                        "careOf": "careOf",
                        "countryCode": "SE",
                        "birthDay": "2005-07-25",
                        "socialSecurityNumber": "202203313008",
                        "gender": "Female",
                        "age": 65,
                        "rfm": 123.45,
                        "extID": 12345,
                        "intTest": 65,
                        "childrenList": [
                            "2017-01-01",
                            "2015-01-01"
                        ],
                        "testGjortTest": true,
                        "testDateSkintest": "2025-07-25T09:39:37+02:00",
                        "dateTest": "2025-07-25T09:39:37+02:00",
                        "testCheckboxMultiple": [
                            "ja",
                            "nej",
                            "kanske"
                        ],
                        "testDropdown": "string",
                        "testCheckBox": true,
                        "testString": "testString",
                        "lang": "en",
                        "currentStoreExternalId": "storeExternalId",
                        "labels": "lableName1,lableName2"
                    },
                    {
                        "contactId": "2a299c01-cb9a-4365-aba4-10242ab9571c",
                        "firstName": "John",
                        "lastName": "Doe",
                        "street": "Example Avenue 12",
                        "zipCode": "string",
                        "city": "Examplecity",
                        "email": "john.doe@example.com",
                        "mobilePhone": "+46700111222",
                        "careOf": "careOf",
                        "countryCode": "SE",
                        "birthDay": "2005-07-25",
                        "socialSecurityNumber": "202203313008",
                        "gender": "Female",
                        "age": 65,
                        "rfm": 123.45,
                        "extID": 12345,
                        "intTest": 65,
                        "childrenList": [
                            "2017-01-01",
                            "2015-01-01"
                        ],
                        "testGjortTest": true,
                        "testDateSkintest": "2025-07-25T09:39:37+02:00",
                        "dateTest": "2025-07-25T09:39:37+02:00",
                        "testCheckboxMultiple": [
                            "ja",
                            "nej",
                            "kanske"
                        ],
                        "testDropdown": "string",
                        "testCheckBox": true,
                        "testString": "testString",
                        "lang": "en",
                        "currentStoreExternalId": "storeExternalId",
                        "labels": "lableName1,lableName2"
                    }
                ]
            },
            "contactPost": {
                "title": "contactPost",
                "example": {
                    "firstName": "John",
                    "lastName": "Doe",
                    "street": "Example Avenue 12",
                    "zipCode": "string",
                    "city": "Examplecity",
                    "email": "john.doe@example.com",
                    "mobilePhone": "+46700111222",
                    "careOf": "careOf",
                    "countryCode": "SE",
                    "birthDay": "2005-07-25",
                    "socialSecurityNumber": "190711231878",
                    "gender": "Female",
                    "age": 65,
                    "extID": 12345,
                    "intTest": 65,
                    "childrenList": [
                        "2017-01-01",
                        "2015-01-01"
                    ],
                    "testGjortTest": true,
                    "testDateSkintest": "2025-07-25T09:39:37+02:00",
                    "dateTest": "2025-07-25T09:39:37+02:00",
                    "testCheckboxMultiple": [
                        "ja",
                        "nej",
                        "kanske"
                    ],
                    "testDropdown": "string",
                    "testCheckBox": true,
                    "testString": "testString",
                    "lang": "en",
                    "contactType": "Member",
                    "meta": {},
                    "preferences": {
                        "acceptsEmail": false,
                        "acceptsPostal": false,
                        "acceptsSms": false
                    },
                    "consents": [
                        {
                            "id": "memberTerms",
                            "value": true,
                            "date": "2025-07-25T09:39:37.5638292+02:00",
                            "source": "string",
                            "comment": "string"
                        },
                        {
                            "id": "testsamtycke",
                            "value": true,
                            "date": "2025-07-25T09:39:37.5638292+02:00",
                            "source": "string",
                            "comment": "string"
                        },
                        {
                            "id": "dbconsent",
                            "value": true,
                            "date": "2025-07-25T09:39:37.5638292+02:00",
                            "source": "string",
                            "comment": "string"
                        }
                    ]
                }
            },
            "InteractionModel": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "contactId": {
                        "format": "uuid",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "schemaId": {
                        "type": "string"
                    },
                    "createdDate": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "payload": {
                        "type": "object"
                    }
                }
            },
            "InteractionPage": {
                "type": "object",
                "properties": {
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/HypermediaLink"
                        }
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InteractionModel"
                        }
                    }
                }
            },
            "HypermediaLink": {
                "type": "object",
                "properties": {
                    "href": {
                        "type": "string"
                    },
                    "method": {
                        "type": "string"
                    },
                    "rel": {
                        "type": "string"
                    }
                }
            },
            "InteractionCreateResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "self": {
                        "$ref": "#/components/schemas/InteractionCreateResponseSelf"
                    }
                }
            },
            "InteractionCreateResponseSelf": {
                "type": "object",
                "properties": {
                    "contactId": {
                        "format": "uuid",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "href": {
                        "type": "string"
                    },
                    "created": {
                        "format": "date-time",
                        "type": "string"
                    }
                }
            },
            "interactionSchema": {
                "title": "interactionSchema",
                "example": {
                    "contactId": "00000000-0000-0000-0000-000000000000",
                    "schemaId": "Reuse-Spring-2023",
                    "createdDate": "2025-07-25 07:39:37 +00:00",
                    "payload": {
                        "price": 123,
                        "delivered": "2011-11-03T20:00:11",
                        "name": "ReusedItem",
                        "orderNumber": "FX-250123-110"
                    }
                }
            },
            "InteractionSchemaWithoutJsonModel": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    }
                }
            },
            "InteractionSchemaModel": {
                "type": "object",
                "properties": {
                    "jsonSchema": {
                        "type": "object"
                    },
                    "id": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    }
                },
                "example": {
                    "id": "string",
                    "displayName": "string",
                    "jsonSchema": "{}"
                }
            },
            "InteractionSchemaResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "self": {
                        "$ref": "#/components/schemas/InteractionSchemaResponseSelf"
                    }
                }
            },
            "InteractionSchemaResponseSelf": {
                "type": "object",
                "properties": {
                    "href": {
                        "type": "string"
                    },
                    "created": {
                        "format": "date-time",
                        "type": "string"
                    }
                }
            },
            "interactionSchemaSchema": {
                "title": "interactionSchemaSchema",
                "example": {
                    "id": "Reuse-Spring-2023",
                    "displayName": "Reuse Spring Sale",
                    "jsonSchema": {
                        "$schema": "https://json-schema.org/draft/2020-12/schema",
                        "type": "object",
                        "properties": {
                            "price": {
                                "type": "integer",
                                "displayName": "Price",
                                "showInContactCard": "true",
                                "addToSegmentation": "false"
                            },
                            "delivered": {
                                "type": "string",
                                "format": "date-time",
                                "displayName": "Delivered",
                                "showInContactCard": "true",
                                "addToSegmentation": "false"
                            },
                            "name": {
                                "type": "string",
                                "displayName": "Name",
                                "showInContactCard": "true",
                                "addToSegmentation": "false"
                            },
                            "orderNumber": {
                                "type": "string",
                                "displayName": "Order number",
                                "showInContactCard": "true",
                                "addToSegmentation": "false"
                            }
                        }
                    }
                }
            },
            "OrderJob": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string"
                    },
                    "jobId": {
                        "type": "string"
                    },
                    "orderId": {
                        "$ref": "#/components/schemas/OrderId"
                    },
                    "href": {
                        "type": "string"
                    },
                    "error": {
                        "type": "string"
                    },
                    "errorDetails": {
                        "type": "string"
                    },
                    "versionTag": {
                        "type": "string"
                    }
                }
            },
            "OrderId": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "OrderResponse": {
                "type": "object",
                "properties": {
                    "orderId": {
                        "type": "string"
                    },
                    "contactId": {
                        "format": "uuid",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "versionTag": {
                        "type": "string"
                    },
                    "externalStoreId": {
                        "type": "string"
                    },
                    "status": {
                        "enum": [
                            "InProgress",
                            "Completed",
                            "Cancelled"
                        ],
                        "type": "string"
                    },
                    "externalStatus": {
                        "type": "string"
                    },
                    "references": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "currencyCode": {
                        "type": "string"
                    },
                    "channel": {
                        "enum": [
                            "Store",
                            "Ecom",
                            "App",
                            "Other"
                        ],
                        "type": "string"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "lastChangedAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "lineItems": {
                        "$ref": "#/components/schemas/LineItemList"
                    },
                    "payments": {
                        "$ref": "#/components/schemas/PaymentList"
                    },
                    "fees": {
                        "$ref": "#/components/schemas/FeeList"
                    },
                    "discounts": {
                        "$ref": "#/components/schemas/DiscountList"
                    },
                    "returnDetails": {
                        "$ref": "#/components/schemas/ReturnDetails"
                    },
                    "delivery": {
                        "$ref": "#/components/schemas/Delivery"
                    },
                    "billingAddress": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "deliveryAddress": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "totalPrice": {
                        "format": "double",
                        "type": "number"
                    },
                    "taxes": {
                        "$ref": "#/components/schemas/TaxListWithTotal"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IHypermediaLink"
                        }
                    }
                }
            },
            "LineItemList": {
                "required": [
                    "items"
                ],
                "type": "object",
                "properties": {
                    "items": {
                        "description": "Breakdown of line items.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LineItem"
                        }
                    },
                    "subTotal": {
                        "format": "double",
                        "description": "The total of all line items' total price values.",
                        "maximum": 1000000000,
                        "minimum": 0,
                        "type": "number"
                    }
                }
            },
            "PaymentList": {
                "required": [
                    "items"
                ],
                "type": "object",
                "properties": {
                    "items": {
                        "description": "Breakdown of payments.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Payment"
                        }
                    }
                }
            },
            "FeeList": {
                "required": [
                    "items"
                ],
                "type": "object",
                "properties": {
                    "items": {
                        "description": "Breakdown of fees.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Fee"
                        }
                    }
                }
            },
            "DiscountList": {
                "required": [
                    "items"
                ],
                "type": "object",
                "properties": {
                    "items": {
                        "description": "Breakdown of discounts.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Discount"
                        }
                    }
                }
            },
            "ReturnDetails": {
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "description": "Type of return (e.g., \"Complaint\").",
                        "enum": [
                            "Normal",
                            "Complaint",
                            "Change"
                        ],
                        "type": "string"
                    },
                    "reason": {
                        "description": "Reason for return.",
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    }
                }
            },
            "Delivery": {
                "required": [
                    "method"
                ],
                "type": "object",
                "properties": {
                    "method": {
                        "description": "Method of delivery.",
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "trackingNumber": {
                        "description": "Tracking number for the delivery.",
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "trackingUri": {
                        "description": "Tracking URI for the delivery.",
                        "type": "string"
                    },
                    "deliveryDate": {
                        "format": "date-time",
                        "description": "Datetime for delivery formatted according to ISO 8601.",
                        "type": "string"
                    }
                }
            },
            "Address": {
                "required": [
                    "firstname",
                    "lastname",
                    "streetAddress",
                    "postalCode",
                    "city",
                    "country"
                ],
                "type": "object",
                "properties": {
                    "title": {
                        "description": "Title of the recipient.",
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "firstname": {
                        "description": "Firstname of the recipient.",
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "lastname": {
                        "description": "Lastname of the recipient.",
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "streetAddress": {
                        "description": "Street address of the recipient.",
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "streetAddress2": {
                        "description": "Street address of the recipient.",
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "postalCode": {
                        "description": "Postal code of the recipient.",
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "region": {
                        "description": "Region of the recipient.",
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "city": {
                        "description": "City of the recipient.",
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "country": {
                        "description": "Country of the recipient.",
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "email": {
                        "description": "Email of the recipient.",
                        "type": "string"
                    },
                    "phone": {
                        "description": "Phone number of the recipient.",
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    }
                }
            },
            "TaxListWithTotal": {
                "required": [
                    "items"
                ],
                "type": "object",
                "properties": {
                    "items": {
                        "description": "Breakdown of taxes.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Tax"
                        }
                    },
                    "totalTax": {
                        "format": "double",
                        "description": "The total of all tax amounts.",
                        "maximum": 1000000000,
                        "minimum": 0,
                        "type": "number"
                    }
                }
            },
            "IHypermediaLink": {
                "type": "object",
                "properties": {
                    "href": {
                        "type": "string"
                    },
                    "method": {
                        "type": "string"
                    },
                    "rel": {
                        "type": "string"
                    }
                }
            },
            "LineItem": {
                "required": [
                    "quantity",
                    "article",
                    "totalPrice"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Unique line item identifier by client.",
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "type": {
                        "description": "Type of line item. Defaults to Purchase if omitted.",
                        "enum": [
                            "Purchase",
                            "Return"
                        ],
                        "type": "string"
                    },
                    "externalStatus": {
                        "description": "Current status of the line item in external systems (e.g., \"Reserved\", \"Picked\")",
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "quantity": {
                        "format": "double",
                        "description": "Quantity of units in line item.",
                        "maximum": 1000000000,
                        "minimum": 0,
                        "type": "number"
                    },
                    "article": {
                        "$ref": "#/components/schemas/Article"
                    },
                    "discounts": {
                        "$ref": "#/components/schemas/DiscountList"
                    },
                    "returnDetails": {
                        "$ref": "#/components/schemas/ReturnDetails"
                    },
                    "pricePerUnit": {
                        "format": "double",
                        "description": "Net amount per unit, discounts applied, taxes included.",
                        "maximum": 1000000000,
                        "minimum": 0,
                        "type": "number"
                    },
                    "originalPricePerUnit": {
                        "format": "double",
                        "description": "Net amount per unit before discounts were applied, taxes included.",
                        "maximum": 1000000000,
                        "minimum": 0,
                        "type": "number"
                    },
                    "totalPrice": {
                        "format": "double",
                        "description": "Total net amount, discounts applied, taxes included.",
                        "maximum": 1000000000,
                        "minimum": 0,
                        "type": "number"
                    },
                    "originalTotalPrice": {
                        "format": "double",
                        "description": "Total net amount before discounts were applied, taxes included.",
                        "maximum": 1000000000,
                        "minimum": 0,
                        "type": "number"
                    },
                    "taxes": {
                        "$ref": "#/components/schemas/TaxList"
                    },
                    "group": {
                        "description": "Group label to categorize line item.",
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    }
                }
            },
            "Payment": {
                "required": [
                    "paidAt",
                    "method",
                    "amount"
                ],
                "type": "object",
                "properties": {
                    "paidAt": {
                        "format": "date-time",
                        "description": "The time the payment was made formatted according to ISO 8601.",
                        "type": "string"
                    },
                    "method": {
                        "description": "The payment method used.",
                        "enum": [
                            "Cash",
                            "CreditDebit",
                            "Mobile",
                            "Voucher",
                            "Coupon",
                            "GiftCard",
                            "OnlinePayment",
                            "HouseAccount",
                            "Invoice",
                            "Installment",
                            "Other"
                        ],
                        "type": "string"
                    },
                    "amount": {
                        "format": "double",
                        "description": "The amount of the payment.",
                        "maximum": 1000000000,
                        "minimum": 0,
                        "type": "number"
                    },
                    "description": {
                        "description": "The description of the payment.",
                        "maxLength": 10000,
                        "minLength": 0,
                        "type": "string"
                    }
                }
            },
            "Fee": {
                "required": [
                    "type",
                    "amount"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "description": "The type of fee (e.g., \"Shipping\").",
                        "enum": [
                            "Shipping",
                            "Service",
                            "Administration",
                            "Other"
                        ],
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the fee.",
                        "maxLength": 10000,
                        "minLength": 0,
                        "type": "string"
                    },
                    "amount": {
                        "format": "double",
                        "description": "The amount of the fee.",
                        "maximum": 1000000000,
                        "minimum": 0,
                        "type": "number"
                    },
                    "taxes": {
                        "$ref": "#/components/schemas/TaxList"
                    }
                }
            },
            "Discount": {
                "required": [
                    "type",
                    "amount"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "description": "The type of discount (e.g., \"Member\").",
                        "enum": [
                            "Member",
                            "Personal",
                            "Seasonal",
                            "Voucher",
                            "Coupon",
                            "Employee",
                            "Other"
                        ],
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the discount.",
                        "maxLength": 10000,
                        "minLength": 0,
                        "type": "string"
                    },
                    "amount": {
                        "format": "double",
                        "description": "The amount of the discount.",
                        "maximum": 1000000000,
                        "minimum": 0,
                        "type": "number"
                    },
                    "code": {
                        "description": "The code of the discount.",
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    }
                }
            },
            "Tax": {
                "required": [
                    "amount",
                    "percent"
                ],
                "type": "object",
                "properties": {
                    "amount": {
                        "format": "double",
                        "description": "Amount of tax.",
                        "maximum": 1000000000,
                        "minimum": 0,
                        "type": "number"
                    },
                    "percent": {
                        "format": "double",
                        "description": "Percent of tax.",
                        "maximum": 100,
                        "minimum": 0,
                        "type": "number"
                    },
                    "description": {
                        "description": "Description of tax (e.g, \"VAT\").",
                        "maxLength": 10000,
                        "minLength": 0,
                        "type": "string"
                    }
                }
            },
            "Article": {
                "required": [
                    "sku"
                ],
                "type": "object",
                "properties": {
                    "sku": {
                        "description": "Stock Keeping Unit. The referred SKU should be registered in advance in the Article register for the segmentation on order data to work.",
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "name": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "description": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "imageUri": {
                        "description": "URI pointing to an product image of the item.",
                        "type": "string"
                    },
                    "targetUri": {
                        "description": "URI pointing to an external page with more information about the item.",
                        "type": "string"
                    }
                }
            },
            "TaxList": {
                "required": [
                    "items"
                ],
                "type": "object",
                "properties": {
                    "items": {
                        "description": "Breakdown of taxes.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Tax"
                        }
                    }
                }
            },
            "ReplaceOrderRequest": {
                "required": [
                    "status",
                    "currencyCode",
                    "totalPrice"
                ],
                "type": "object",
                "properties": {
                    "externalStoreId": {
                        "description": "External store identifier.",
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "status": {
                        "description": "Current status of the order (e.g., \"InProgress\").",
                        "enum": [
                            "InProgress",
                            "Completed",
                            "Cancelled"
                        ],
                        "type": "string"
                    },
                    "externalStatus": {
                        "description": "Current status of the order in external systems (e.g., \"Reserved\", \"Picked\").",
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "references": {
                        "description": "A list of orderId's that relate to the current order.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "currencyCode": {
                        "description": "The currency code according to ISO 4217.",
                        "type": "string"
                    },
                    "channel": {
                        "description": "Channel where the order was created. Defaults to Store if omitted.",
                        "enum": [
                            "Store",
                            "Ecom",
                            "App",
                            "Other"
                        ],
                        "type": "string"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "description": "Datetime when this order was created formatted according to ISO 8601.",
                        "type": "string"
                    },
                    "lastChangedAt": {
                        "format": "date-time",
                        "description": "Datetime when this order was last changed formatted according to ISO 8601.",
                        "type": "string"
                    },
                    "lineItems": {
                        "$ref": "#/components/schemas/LineItemList"
                    },
                    "payments": {
                        "$ref": "#/components/schemas/PaymentList"
                    },
                    "fees": {
                        "$ref": "#/components/schemas/FeeList"
                    },
                    "discounts": {
                        "$ref": "#/components/schemas/DiscountList"
                    },
                    "returnDetails": {
                        "$ref": "#/components/schemas/ReturnDetails"
                    },
                    "delivery": {
                        "$ref": "#/components/schemas/Delivery"
                    },
                    "billingAddress": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "deliveryAddress": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "totalPrice": {
                        "format": "double",
                        "description": "Total net amount, discounts applied, fees and taxes included.",
                        "maximum": 1000000000,
                        "minimum": 0,
                        "type": "number"
                    },
                    "taxes": {
                        "$ref": "#/components/schemas/TaxListWithTotal"
                    }
                },
                "example": {
                    "externalStoreId": "Ecom-Europe",
                    "status": "InProgress",
                    "externalStatus": "Picked",
                    "references": [
                        "order-123"
                    ],
                    "currencyCode": "EUR",
                    "channel": "Ecom",
                    "createdAt": "2025-07-25T09:38:37+02:00",
                    "lastChangedAt": "2025-07-25T09:39:37+02:00",
                    "lineItems": {
                        "items": [
                            {
                                "id": "item-1",
                                "type": "Purchase",
                                "externalStatus": "Reserved",
                                "quantity": 1,
                                "article": {
                                    "sku": "1978-abc80-1",
                                    "name": "ABC 80",
                                    "description": "Advanced Basic Computer for the 1980s",
                                    "imageUri": "https://placehold.co/600x420",
                                    "targetUri": "https://example.com/abc80"
                                },
                                "discounts": {
                                    "items": [
                                        {
                                            "type": "Voucher",
                                            "description": "Reward voucher",
                                            "amount": 100,
                                            "code": "reward"
                                        }
                                    ]
                                },
                                "pricePerUnit": 1199,
                                "originalPricePerUnit": 1299,
                                "totalPrice": 1199,
                                "originalTotalPrice": 1299,
                                "taxes": {
                                    "items": [
                                        {
                                            "amount": 299.75,
                                            "percent": 25,
                                            "description": "VAT"
                                        }
                                    ]
                                },
                                "group": "group-1"
                            },
                            {
                                "id": "item-2",
                                "type": "Purchase",
                                "externalStatus": "Picked",
                                "quantity": 2,
                                "article": {
                                    "sku": "1978-abc80-2",
                                    "name": "Power Supply",
                                    "description": "Advanced Basic Computer for the 1980s",
                                    "imageUri": "https://placehold.co/600x420",
                                    "targetUri": "https://example.com/abc80"
                                },
                                "discounts": {
                                    "items": [
                                        {
                                            "type": "Voucher",
                                            "description": "Reward voucher",
                                            "amount": 100,
                                            "code": "reward"
                                        }
                                    ]
                                },
                                "pricePerUnit": 199,
                                "originalPricePerUnit": 299,
                                "totalPrice": 398,
                                "originalTotalPrice": 598,
                                "taxes": {
                                    "items": [
                                        {
                                            "amount": 99.5,
                                            "percent": 25,
                                            "description": "VAT"
                                        }
                                    ]
                                },
                                "group": "group-2"
                            }
                        ],
                        "subTotal": 1597
                    },
                    "payments": {
                        "items": [
                            {
                                "paidAt": "2025-07-25T09:39:37.8764655+02:00",
                                "method": "CreditDebit",
                                "amount": 1647,
                                "description": "MasterCard payment"
                            }
                        ]
                    },
                    "fees": {
                        "items": [
                            {
                                "type": "Shipping",
                                "description": "DHL",
                                "amount": 100,
                                "taxes": {
                                    "items": [
                                        {
                                            "amount": 25,
                                            "percent": 25,
                                            "description": "VAT"
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "Administration",
                                "description": "Administration fee",
                                "amount": 50,
                                "taxes": {
                                    "items": [
                                        {
                                            "amount": 12.5,
                                            "percent": 25,
                                            "description": "VAT"
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "discounts": {
                        "items": [
                            {
                                "type": "Seasonal",
                                "description": "Vintage Days campaign",
                                "amount": 100,
                                "code": "vintagedays"
                            }
                        ]
                    },
                    "delivery": {
                        "method": "DHL",
                        "trackingNumber": "1234567890",
                        "trackingUri": "https://dhl.com/track/1234567890",
                        "deliveryDate": "2025-07-28T09:39:37+02:00"
                    },
                    "billingAddress": {
                        "title": "Mr",
                        "firstname": "John",
                        "lastname": "Doe",
                        "streetAddress": "Main Street 1",
                        "postalCode": "12345",
                        "city": "Springfield",
                        "country": "US",
                        "email": "john@example.com",
                        "phone": "+1234567890"
                    },
                    "deliveryAddress": {
                        "title": "Mr",
                        "firstname": "John",
                        "lastname": "Doe",
                        "streetAddress": "Main Street 1",
                        "postalCode": "12345",
                        "city": "Springfield",
                        "country": "US",
                        "email": "john@example.com",
                        "phone": "+1234567890"
                    },
                    "totalPrice": 1647,
                    "taxes": {
                        "items": [
                            {
                                "amount": 411.75,
                                "percent": 25,
                                "description": "VAT"
                            }
                        ],
                        "totalTax": 411.75
                    }
                }
            },
            "PagedOrderResponses": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrderResponse"
                        }
                    },
                    "totalCount": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "offset": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "count": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IHypermediaLink"
                        }
                    }
                }
            },
            "CreateOrderRequest": {
                "required": [
                    "orderId",
                    "contact",
                    "status",
                    "currencyCode",
                    "totalPrice"
                ],
                "type": "object",
                "properties": {
                    "orderId": {
                        "description": "Unique order identifier by client.",
                        "maxLength": 64,
                        "minLength": 0,
                        "type": "string"
                    },
                    "contact": {
                        "$ref": "#/components/schemas/ContactKey"
                    },
                    "externalStoreId": {
                        "description": "External store identifier.",
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "status": {
                        "description": "Current status of the order (e.g., \"InProgress\").",
                        "enum": [
                            "InProgress",
                            "Completed",
                            "Cancelled"
                        ],
                        "type": "string"
                    },
                    "externalStatus": {
                        "description": "Current status of the order in external systems (e.g., \"Reserved\", \"Picked\").",
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "references": {
                        "description": "A list of orderId's that relate to the current order.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "currencyCode": {
                        "description": "The currency code according to ISO 4217.",
                        "type": "string"
                    },
                    "channel": {
                        "description": "Channel where the order was created. Defaults to Store if omitted.",
                        "enum": [
                            "Store",
                            "Ecom",
                            "App",
                            "Other"
                        ],
                        "type": "string"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "description": "Datetime when this order was created formatted according to ISO 8601.",
                        "type": "string"
                    },
                    "lastChangedAt": {
                        "format": "date-time",
                        "description": "Datetime when this order was last changed formatted according to ISO 8601.",
                        "type": "string"
                    },
                    "lineItems": {
                        "$ref": "#/components/schemas/LineItemList"
                    },
                    "payments": {
                        "$ref": "#/components/schemas/PaymentList"
                    },
                    "fees": {
                        "$ref": "#/components/schemas/FeeList"
                    },
                    "discounts": {
                        "$ref": "#/components/schemas/DiscountList"
                    },
                    "returnDetails": {
                        "$ref": "#/components/schemas/ReturnDetails"
                    },
                    "delivery": {
                        "$ref": "#/components/schemas/Delivery"
                    },
                    "billingAddress": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "deliveryAddress": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "totalPrice": {
                        "format": "double",
                        "description": "Total net amount, discounts applied, fees and taxes included.",
                        "maximum": 1000000000,
                        "minimum": 0,
                        "type": "number"
                    },
                    "taxes": {
                        "$ref": "#/components/schemas/TaxListWithTotal"
                    }
                },
                "example": {
                    "orderId": "order-1753429177",
                    "contact": {
                        "matchKey": "john@example.com",
                        "matchKeyType": "Email"
                    },
                    "externalStoreId": "Ecom-Europe",
                    "status": "InProgress",
                    "externalStatus": "Picked",
                    "references": [
                        "order-123"
                    ],
                    "currencyCode": "EUR",
                    "channel": "Ecom",
                    "createdAt": "2025-07-25T09:38:37+02:00",
                    "lastChangedAt": "2025-07-25T09:39:37+02:00",
                    "lineItems": {
                        "items": [
                            {
                                "id": "item-1",
                                "type": "Purchase",
                                "externalStatus": "Reserved",
                                "quantity": 1,
                                "article": {
                                    "sku": "1978-abc80-1",
                                    "name": "ABC 80",
                                    "description": "Advanced Basic Computer for the 1980s",
                                    "imageUri": "https://placehold.co/600x420",
                                    "targetUri": "https://example.com/abc80"
                                },
                                "discounts": {
                                    "items": [
                                        {
                                            "type": "Voucher",
                                            "description": "Reward voucher",
                                            "amount": 100,
                                            "code": "reward"
                                        }
                                    ]
                                },
                                "pricePerUnit": 1199,
                                "originalPricePerUnit": 1299,
                                "totalPrice": 1199,
                                "originalTotalPrice": 1299,
                                "taxes": {
                                    "items": [
                                        {
                                            "amount": 299.75,
                                            "percent": 25,
                                            "description": "VAT"
                                        }
                                    ]
                                },
                                "group": "group-1"
                            },
                            {
                                "id": "item-2",
                                "type": "Purchase",
                                "externalStatus": "Picked",
                                "quantity": 2,
                                "article": {
                                    "sku": "1978-abc80-2",
                                    "name": "Power Supply",
                                    "description": "Advanced Basic Computer for the 1980s",
                                    "imageUri": "https://placehold.co/600x420",
                                    "targetUri": "https://example.com/abc80"
                                },
                                "discounts": {
                                    "items": [
                                        {
                                            "type": "Voucher",
                                            "description": "Reward voucher",
                                            "amount": 100,
                                            "code": "reward"
                                        }
                                    ]
                                },
                                "pricePerUnit": 199,
                                "originalPricePerUnit": 299,
                                "totalPrice": 398,
                                "originalTotalPrice": 598,
                                "taxes": {
                                    "items": [
                                        {
                                            "amount": 99.5,
                                            "percent": 25,
                                            "description": "VAT"
                                        }
                                    ]
                                },
                                "group": "group-2"
                            }
                        ],
                        "subTotal": 1597
                    },
                    "payments": {
                        "items": [
                            {
                                "paidAt": "2025-07-25T09:39:37.954607+02:00",
                                "method": "CreditDebit",
                                "amount": 1647,
                                "description": "MasterCard payment"
                            }
                        ]
                    },
                    "fees": {
                        "items": [
                            {
                                "type": "Shipping",
                                "description": "DHL",
                                "amount": 100,
                                "taxes": {
                                    "items": [
                                        {
                                            "amount": 25,
                                            "percent": 25,
                                            "description": "VAT"
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "Administration",
                                "description": "Administration fee",
                                "amount": 50,
                                "taxes": {
                                    "items": [
                                        {
                                            "amount": 12.5,
                                            "percent": 25,
                                            "description": "VAT"
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "discounts": {
                        "items": [
                            {
                                "type": "Seasonal",
                                "description": "Vintage Days campaign",
                                "amount": 100,
                                "code": "vintagedays"
                            }
                        ]
                    },
                    "delivery": {
                        "method": "DHL",
                        "trackingNumber": "1234567890",
                        "trackingUri": "https://dhl.com/track/1234567890",
                        "deliveryDate": "2025-07-28T09:39:37+02:00"
                    },
                    "billingAddress": {
                        "title": "Mr",
                        "firstname": "John",
                        "lastname": "Doe",
                        "streetAddress": "Main Street 1",
                        "postalCode": "12345",
                        "city": "Springfield",
                        "country": "US",
                        "email": "john@example.com",
                        "phone": "+1234567890"
                    },
                    "deliveryAddress": {
                        "title": "Mr",
                        "firstname": "John",
                        "lastname": "Doe",
                        "streetAddress": "Main Street 1",
                        "postalCode": "12345",
                        "city": "Springfield",
                        "country": "US",
                        "email": "john@example.com",
                        "phone": "+1234567890"
                    },
                    "totalPrice": 1647,
                    "taxes": {
                        "items": [
                            {
                                "amount": 411.75,
                                "percent": 25,
                                "description": "VAT"
                            }
                        ],
                        "totalTax": 411.75
                    }
                }
            },
            "ContactKey": {
                "required": [
                    "matchKey",
                    "matchKeyType"
                ],
                "type": "object",
                "properties": {
                    "matchKey": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "matchKeyType": {
                        "enum": [
                            "Email",
                            "SocialSecurityNumber",
                            "MobilePhone",
                            "CardId",
                            "ExternalId",
                            "MemberNumber",
                            "ContactId",
                            "MemberNumberWithCardNumberAsFallback"
                        ],
                        "type": "string"
                    }
                }
            },
            "OrderActionRequest": {
                "required": [
                    "action",
                    "versionTag"
                ],
                "type": "object",
                "properties": {
                    "action": {
                        "description": "Order action to perform (e.g., \"ConfirmOrder\", \"ConfirmDelivery\").",
                        "enum": [
                            "ConfirmOrder",
                            "ConfirmDelivery",
                            "ConfirmShipment",
                            "ConfirmCancellation",
                            "ConfirmCompletion",
                            "Custom"
                        ],
                        "type": "string"
                    },
                    "versionTag": {
                        "description": "Version tag of the order to perform the action on.",
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "language": {
                        "description": "Language tag for the order action (e.g, \"sv-SE\", \"en-US\").",
                        "type": "string"
                    },
                    "data": {
                        "description": "Additional data for the order action, that can be used for personalization in transactional communication.",
                        "type": "object"
                    }
                },
                "example": {
                    "action": "ConfirmOrder",
                    "versionTag": "roifado5xmcvk5clyli6aewmx4",
                    "language": "en-US",
                    "data": {
                        "custom": "data",
                        "list": [
                            "data1",
                            "data2"
                        ]
                    }
                }
            },
            "ChangeOrderStatusRequest": {
                "required": [
                    "status"
                ],
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Current status of the order (e.g., \"InProgress\").",
                        "enum": [
                            "InProgress",
                            "Completed",
                            "Cancelled"
                        ],
                        "type": "string"
                    },
                    "externalStatus": {
                        "description": "Current status of the order in external systems (e.g., \"Reserved\", \"Picked\").",
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "lastChangedAt": {
                        "format": "date-time",
                        "description": "Datetime when this order was last changed formatted according to ISO 8601.",
                        "type": "string"
                    }
                },
                "example": {
                    "status": "InProgress",
                    "externalStatus": "Picked",
                    "lastChangedAt": "2025-07-25T09:39:38+02:00"
                }
            },
            "ChangeOrderDeliveryRequest": {
                "required": [
                    "method"
                ],
                "type": "object",
                "properties": {
                    "method": {
                        "description": "Method of delivery.",
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "trackingNumber": {
                        "description": "Tracking number for the delivery.",
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "trackingUri": {
                        "description": "Tracking URI for the delivery.",
                        "type": "string"
                    },
                    "deliveryDate": {
                        "format": "date-time",
                        "description": "Datetime for delivery formatted according to ISO 8601.",
                        "type": "string"
                    },
                    "lastChangedAt": {
                        "format": "date-time",
                        "description": "Datetime when this order was last changed formatted according to ISO 8601.",
                        "type": "string"
                    }
                },
                "example": {
                    "method": "DHL",
                    "trackingNumber": "1234567890",
                    "trackingUri": "https://dhl.com/track/1234567890",
                    "deliveryDate": "2025-07-28T09:39:38+02:00",
                    "lastChangedAt": "2025-07-25T09:39:38+02:00"
                }
            },
            "ContactSearchResult": {
                "type": "object",
                "properties": {
                    "firstName": {
                        "type": "string"
                    },
                    "lastName": {
                        "type": "string"
                    },
                    "careOf": {
                        "type": "string"
                    },
                    "street": {
                        "type": "string"
                    },
                    "zipCode": {
                        "type": "string"
                    },
                    "city": {
                        "type": "string"
                    },
                    "birthDay": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "country": {
                        "type": "string"
                    },
                    "phoneNumber": {
                        "type": "string"
                    },
                    "mobilePhoneNumber": {
                        "type": "string"
                    },
                    "gender": {
                        "type": "string"
                    },
                    "searchKey": {
                        "enum": [
                            "MobilePhone",
                            "SocialSecurityNumber"
                        ],
                        "type": "string"
                    },
                    "unregisteredFromOnlineRegisterInformation": {
                        "$ref": "#/components/schemas/UnregisteredFromOnlineRegisterInformation"
                    }
                }
            },
            "UnregisteredFromOnlineRegisterInformation": {
                "type": "object",
                "properties": {
                    "reason": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string"
                    },
                    "newSocialSecurityNumber": {
                        "type": "string"
                    }
                }
            },
            "PointAccountModelV3": {
                "type": "object",
                "properties": {
                    "id": {
                        "format": "uuid",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "balance": {
                        "format": "double",
                        "type": "number"
                    },
                    "balanceExpires": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "contactId": {
                        "format": "uuid",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "definitionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "pendingPoints": {
                        "format": "double",
                        "type": "number"
                    },
                    "pointsWillExpireDueToInactivity": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IHypermediaLink"
                        }
                    }
                },
                "example": {
                    "id": "b60bd6a5-80c5-49ac-8e88-e8ae323adb93",
                    "balance": 110,
                    "balanceExpires": "2025-09-25T09:39:38.0795607+02:00",
                    "contactId": "2c4c1530-4e5b-49c7-b48b-a70801129e67",
                    "definitionId": 1,
                    "pendingPoints": 0,
                    "pointsWillExpireDueToInactivity": "2025-09-25T09:39:38.0795607+02:00",
                    "links": [
                        {
                            "href": "https://mytenant.voyado.com/api/v3/point-accounts/b60bd6a5-80c5-49ac-8e88-e8ae323adb93/transactions",
                            "method": "GET",
                            "rel": "transactions"
                        }
                    ]
                }
            },
            "PointTransactionDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "format": "uuid",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "accountId": {
                        "format": "uuid",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "description": {
                        "type": "string"
                    },
                    "source": {
                        "type": "string"
                    },
                    "amount": {
                        "format": "double",
                        "type": "number"
                    },
                    "type": {
                        "type": "string"
                    },
                    "transactionDate": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "createdOn": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "modifiedOn": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "validFrom": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "validTo": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "expireAfterMonthsInactive": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "retailTransactionLineItemId": {
                        "type": "string"
                    },
                    "automationPointsAdjustmentReason": {
                        "type": "string"
                    }
                }
            },
            "CreatePointAccountModel": {
                "required": [
                    "contactId",
                    "pointAccountDefinitionId"
                ],
                "type": "object",
                "properties": {
                    "contactId": {
                        "format": "uuid",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "pointAccountDefinitionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "PointTransactionDtoResult": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PointTransactionDto"
                        }
                    },
                    "totalCount": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "offset": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "count": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IHypermediaLink"
                        }
                    }
                },
                "example": {
                    "items": [
                        {
                            "id": "f15c9aa6-88f7-47ab-89fa-292e63e72356",
                            "accountId": "cd0b8b6c-654a-4221-a76b-bf0b5935fddb",
                            "description": "Test",
                            "source": "Automation",
                            "amount": 100,
                            "type": "Addition",
                            "transactionDate": "2025-07-25T09:39:38.1265602+02:00",
                            "createdOn": "2025-07-25T09:39:38.1265602+02:00",
                            "modifiedOn": "2025-07-25T09:39:38.1265602+02:00",
                            "validFrom": "2025-07-20T09:39:38.1265602+02:00",
                            "validTo": "2025-07-30T09:39:38.1265602+02:00",
                            "expireAfterMonthsInactive": 6,
                            "retailTransactionLineItemId": "0dce0efb-568f-4b05-9628-285dc9ec80b6",
                            "automationPointsAdjustmentReason": "From automation"
                        }
                    ],
                    "totalCount": 1,
                    "offset": 0,
                    "count": 1,
                    "links": [
                        {
                            "href": "https://mytenant.voyado.com/api/v{x}/point-accounts/0e0e9f81-8977-4c90-b3b3-a6d60086c034/transactions?offset=0&count=5",
                            "method": "GET",
                            "rel": "previous"
                        },
                        {
                            "href": "https://mytenant.voyado.com/api/v{x}/point-accounts/0e0e9f81-8977-4c90-b3b3-a6d60086c034/transactions?offset=5&count=5",
                            "method": "GET",
                            "rel": "next"
                        }
                    ]
                }
            },
            "AddPointTransactionRequestModel": {
                "type": "object",
                "properties": {
                    "accountId": {
                        "format": "uuid",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "transactionId": {
                        "format": "uuid",
                        "description": "The unique identifier of the transaction. This is used to prevent duplicate transactions.",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "transactionType": {
                        "enum": [
                            "Addition",
                            "Deduction",
                            "Expiry",
                            "Cancellation"
                        ],
                        "type": "string"
                    },
                    "amount": {
                        "format": "double",
                        "description": "Non negative number. If you want to deduct points, use PointType Deduction.",
                        "type": "number"
                    },
                    "description": {
                        "type": "string"
                    },
                    "source": {
                        "enum": [
                            "Automation",
                            "Purchase",
                            "Manual",
                            "Return",
                            "ReceiptAdjustment",
                            "BonusPromotion",
                            "BonusPromotionReturn",
                            "RewardVoucher",
                            "Adjustment",
                            "BonusBalanceAdjustment",
                            "UpdateBalance",
                            "PointTransactionCancellation",
                            "ResetBalance"
                        ],
                        "type": "string"
                    },
                    "transactionDate": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "validFrom": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "validTo": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "expireAfterMonthsInactive": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "PointTransactionToAccount": {
                "type": "object",
                "properties": {
                    "contactId": {
                        "format": "uuid",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "amount": {
                        "format": "double",
                        "type": "number"
                    },
                    "definitionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "timeStamp": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "source": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "validFrom": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "validTo": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "expireAfterMonthsInactive": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "PointTransactionToAccountResultModel": {
                "type": "object",
                "properties": {
                    "notAccepted": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PointTransactionToAccount"
                        }
                    },
                    "errorMessages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "missingDefinitionIds": {
                        "type": "array",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        }
                    },
                    "missingContactIds": {
                        "type": "array",
                        "items": {
                            "format": "uuid",
                            "type": "string",
                            "example": "00000000-0000-0000-0000-000000000000"
                        }
                    }
                }
            },
            "ApiExceptionResponse": {
                "type": "object",
                "properties": {
                    "errorCode": {
                        "type": "string",
                        "readOnly": true
                    },
                    "messageDetails": {
                        "type": "object",
                        "readOnly": true
                    },
                    "message": {
                        "type": "string"
                    },
                    "requestId": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "PointShopItemResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "format": "uuid",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "name": {
                        "type": "string"
                    },
                    "cost": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "pointDefinitionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "promotionId": {
                        "format": "uuid",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                    }
                }
            },
            "PointShopItemRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "cost": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "pointDefinitionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "promotionId": {
                        "format": "uuid",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                    }
                }
            },
            "PurchasePointShopItemRequest": {
                "type": "object",
                "properties": {
                    "pointShopItemId": {
                        "format": "uuid",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "contactId": {
                        "format": "uuid",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                    }
                }
            },
            "MultichannelPromotionModel": {
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "format": "uuid",
                        "description": "Internal Id in Voyado",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "status": {
                        "description": "Current status of the promotion",
                        "enum": [
                            "Ended",
                            "Active",
                            "Temporary",
                            "Draft",
                            "Scheduled"
                        ],
                        "type": "string",
                        "readOnly": true
                    },
                    "externalId": {
                        "description": "External id generated from system outside of Voyado",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of promtion.\r\nFollowing field is required and don't allows to be left out or set to null or empty string",
                        "type": "string"
                    },
                    "validity": {
                        "$ref": "#/components/schemas/PromotionValidityModel"
                    },
                    "presentation": {
                        "$ref": "#/components/schemas/PromotionBasicPresentationModel"
                    },
                    "redemptionChannels": {
                        "description": "Redemption channels\r\nValid channels: POS, ECOM and OTHER",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MultichannelPromotionRedemptionChannelModel"
                        }
                    }
                },
                "example": {
                    "id": "e6cf8d75-bf1b-4b23-b628-ce78ef7e9a32",
                    "status": "Draft",
                    "externalId": "externalIdentifier",
                    "name": "Promotion Name",
                    "validity": {
                        "startDate": "2025-07-26T09:39:38.2203178+02:00",
                        "assignedValidity": {
                            "unit": "Months",
                            "amount": 3
                        }
                    },
                    "presentation": {
                        "heading": "Promotion presentation title",
                        "description": "Promotion presentation description",
                        "link": "http://www.example.com"
                    },
                    "redemptionChannels": [
                        {
                            "type": "POS",
                            "valueType": "EXTERNALOFFER",
                            "value": "PromotionCode",
                            "instruction": "POS Instruction"
                        },
                        {
                            "type": "ECOM",
                            "valueType": "MONEY",
                            "value": "20.5"
                        }
                    ]
                }
            },
            "PromotionValidityModel": {
                "description": "Following class holds the duration information for a promotion.\r\nThe this object uses to set and get the duration of a promotion.",
                "required": [
                    "startDate"
                ],
                "type": "object",
                "properties": {
                    "startDate": {
                        "format": "date-time",
                        "description": "Start date when the promotion going to be active",
                        "type": "string"
                    },
                    "endDate": {
                        "format": "date-time",
                        "description": "End date when the promotion not longer active",
                        "type": "string"
                    },
                    "assignedValidity": {
                        "$ref": "#/components/schemas/AssignDateRange"
                    }
                }
            },
            "PromotionBasicPresentationModel": {
                "description": "Following object is for get/set the presentational side of the promotion.\r\nThis data uses to displey in different kind of views, for an example in Email messages etc.\r\n            \r\nThis fields populates the \"Presentation\" section in the admin UI.",
                "type": "object",
                "properties": {
                    "heading": {
                        "description": "Heading for the promotion.\r\nUses to show up in different kind of views.",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description for the promotion.\r\nUses to show up in different kind of views.",
                        "type": "string"
                    },
                    "link": {
                        "description": "A external link for the promotion.\r\nUses to show up in different kind of views.",
                        "type": "string"
                    }
                }
            },
            "MultichannelPromotionRedemptionChannelModel": {
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "POS",
                            "ECOM",
                            "OTHER"
                        ],
                        "type": "string"
                    },
                    "valueType": {
                        "enum": [
                            "PERCENT",
                            "MONEY",
                            "EXTERNALOFFER",
                            "MANUAL",
                            "SWIPE"
                        ],
                        "type": "string"
                    },
                    "value": {
                        "description": "The type of \"Value\" depends on \"ValueType\".\r\n\"MONEY\" expects a decimal as a string (\"20.5\"). \"SWIPE\", \"EXTERNALOFFER\" and \"MANUAL\" expects a string (\"Promotion\"). \"PERCENT\" expects an integer as a string (\"20\").",
                        "type": "string"
                    },
                    "localValues": {
                        "type": "array",
                        "items": {
                            "required": [
                                "amount",
                                "currency"
                            ],
                            "type": "object",
                            "properties": {
                                "amount": {
                                    "format": "double",
                                    "type": "number"
                                },
                                "currency": {
                                    "type": "string"
                                }
                            },
                            "example": {
                                "amount": 123.45,
                                "currency": "EUR"
                            }
                        }
                    },
                    "instruction": {
                        "type": "string"
                    }
                }
            },
            "AssignDateRange": {
                "description": "The validity time of the promotion set when assignment occured",
                "required": [
                    "unit",
                    "amount"
                ],
                "type": "object",
                "properties": {
                    "unit": {
                        "enum": [
                            "Months",
                            "Days"
                        ],
                        "type": "string"
                    },
                    "amount": {
                        "format": "int32",
                        "maximum": 2147483647,
                        "minimum": 1,
                        "type": "integer"
                    }
                }
            },
            "BadRequestMessageSwaggerModel": {
                "description": "Only used for Swagger example model",
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "ExceptionResponseContent": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string"
                    },
                    "requestId": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "StatusCodeResult": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "enum": [
                            "Continue",
                            "SwitchingProtocols",
                            "OK",
                            "Created",
                            "Accepted",
                            "NonAuthoritativeInformation",
                            "NoContent",
                            "ResetContent",
                            "PartialContent",
                            "MultipleChoices",
                            "Ambiguous",
                            "MovedPermanently",
                            "Moved",
                            "Found",
                            "Redirect",
                            "SeeOther",
                            "RedirectMethod",
                            "NotModified",
                            "UseProxy",
                            "Unused",
                            "TemporaryRedirect",
                            "RedirectKeepVerb",
                            "BadRequest",
                            "Unauthorized",
                            "PaymentRequired",
                            "Forbidden",
                            "NotFound",
                            "MethodNotAllowed",
                            "NotAcceptable",
                            "ProxyAuthenticationRequired",
                            "RequestTimeout",
                            "Conflict",
                            "Gone",
                            "LengthRequired",
                            "PreconditionFailed",
                            "RequestEntityTooLarge",
                            "RequestUriTooLong",
                            "UnsupportedMediaType",
                            "RequestedRangeNotSatisfiable",
                            "ExpectationFailed",
                            "UpgradeRequired",
                            "InternalServerError",
                            "NotImplemented",
                            "BadGateway",
                            "ServiceUnavailable",
                            "GatewayTimeout",
                            "HttpVersionNotSupported"
                        ],
                        "type": "string",
                        "readOnly": true
                    },
                    "request": {
                        "type": "object",
                        "readOnly": true
                    }
                }
            },
            "MultichannelBasePromotionModel": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "externalId": {
                        "description": "External id generated from system outside of Voyado",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of promtion.\r\nFollowing field is required and don't allows to be left out or set to null or empty string",
                        "type": "string"
                    },
                    "validity": {
                        "$ref": "#/components/schemas/PromotionValidityModel"
                    },
                    "presentation": {
                        "$ref": "#/components/schemas/PromotionBasicPresentationModel"
                    },
                    "redemptionChannels": {
                        "description": "Redemption channels\r\nValid channels: POS, ECOM and OTHER",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MultichannelPromotionRedemptionChannelModel"
                        }
                    }
                },
                "example": {
                    "externalId": "externalIdentifier",
                    "name": "Promotion Name",
                    "validity": {
                        "startDate": "2025-07-26T09:39:38.2708617+02:00",
                        "assignedValidity": {
                            "unit": "Months",
                            "amount": 3
                        }
                    },
                    "presentation": {
                        "heading": "Promotion presentation title",
                        "description": "Promotion presentation description",
                        "link": "http://www.example.com"
                    },
                    "redemptionChannels": [
                        {
                            "type": "POS",
                            "valueType": "EXTERNALOFFER",
                            "value": "PromotionCode",
                            "instruction": "POS Instruction"
                        },
                        {
                            "type": "ECOM",
                            "valueType": "MONEY",
                            "value": "20.5"
                        }
                    ]
                }
            },
            "InvalidModelStateSwaggerModel": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "readOnly": true
                    },
                    "modelState": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ModelState"
                        },
                        "readOnly": true
                    }
                }
            },
            "ModelState": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/ValueProviderResult"
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ModelError"
                        },
                        "readOnly": true
                    }
                }
            },
            "ValueProviderResult": {
                "type": "object",
                "properties": {
                    "attemptedValue": {
                        "type": "string",
                        "readOnly": true
                    },
                    "culture": {
                        "type": "string",
                        "readOnly": true
                    },
                    "rawValue": {
                        "type": "object",
                        "readOnly": true
                    }
                }
            },
            "ModelError": {
                "type": "object",
                "properties": {
                    "exception": {
                        "type": "object",
                        "readOnly": true
                    },
                    "errorMessage": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "ApiPromotionModel": {
                "type": "object",
                "properties": {
                    "id": {
                        "format": "uuid",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "promotionId": {
                        "format": "uuid",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "externalId": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "expiresOn": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "heading": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "redeemed": {
                        "type": "boolean"
                    },
                    "redeemedOn": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "imageUrl": {
                        "type": "string"
                    },
                    "link": {
                        "type": "string"
                    },
                    "redemptionChannels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApiPromotionRedemptionChannelModel"
                        }
                    }
                }
            },
            "AnyValue": {
                "description": "Can be anything: string, number, array, object, etc. (except `null`). See specific API for details",
                "example": ""
            },
            "ApiPromotionRedemptionChannelModel": {
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "POS",
                            "ECOM",
                            "OTHER"
                        ],
                        "type": "string"
                    },
                    "valueType": {
                        "enum": [
                            "PERCENT",
                            "MONEY",
                            "EXTERNALOFFER",
                            "MANUAL",
                            "SWIPE"
                        ],
                        "type": "string"
                    },
                    "value": {
                        "description": "The type of \"Value\" depends on \"ValueType\".\r\n\"MONEY\" returns a Money object (Amount+Currency), \"EXTERNALOFFER\" and \"MANUAL\" returns a string (\"Promotion\"). \"PERCENT\" returns an integer.",
                        "type": "AnyValue",
                        "example": "10"
                    },
                    "localValues": {
                        "type": "array",
                        "items": {
                            "required": [
                                "amount",
                                "currency"
                            ],
                            "type": "object",
                            "properties": {
                                "amount": {
                                    "format": "double",
                                    "type": "number"
                                },
                                "currency": {
                                    "type": "string"
                                }
                            },
                            "example": {
                                "amount": 123.45,
                                "currency": "EUR"
                            }
                        }
                    },
                    "instruction": {
                        "type": "string"
                    }
                }
            },
            "AssignPromotionModel": {
                "required": [
                    "contactId",
                    "promotionId"
                ],
                "type": "object",
                "properties": {
                    "contactId": {
                        "format": "uuid",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "promotionId": {
                        "format": "uuid",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                    }
                }
            },
            "RedeemBodyModel": {
                "type": "object",
                "properties": {
                    "redemptionChannel": {
                        "type": "string"
                    }
                }
            },
            "PagedResultOfAllRewardVoucherModel": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AllRewardVoucherModel"
                        }
                    },
                    "totalCount": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "offset": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "count": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "AllRewardVoucherModel": {
                "type": "object",
                "properties": {
                    "redeemedOn": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "redeemed": {
                        "type": "boolean"
                    },
                    "expiresOn": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "id": {
                        "format": "uuid",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "voucherNumber": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "required": [
                            "amount",
                            "currency"
                        ],
                        "type": "object",
                        "properties": {
                            "amount": {
                                "format": "double",
                                "type": "number"
                            },
                            "currency": {
                                "type": "string"
                            }
                        },
                        "example": {
                            "amount": 123.45,
                            "currency": "EUR"
                        }
                    },
                    "localValues": {
                        "type": "array",
                        "items": {
                            "required": [
                                "amount",
                                "currency"
                            ],
                            "type": "object",
                            "properties": {
                                "amount": {
                                    "format": "double",
                                    "type": "number"
                                },
                                "currency": {
                                    "type": "string"
                                }
                            },
                            "example": {
                                "amount": 123.45,
                                "currency": "EUR"
                            }
                        }
                    },
                    "points": {
                        "format": "double",
                        "type": "number"
                    }
                }
            },
            "PagedResultOfRedeemedRewardVoucherModel": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RedeemedRewardVoucherModel"
                        }
                    },
                    "totalCount": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "offset": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "count": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "RedeemedRewardVoucherModel": {
                "type": "object",
                "properties": {
                    "redeemedOn": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "id": {
                        "format": "uuid",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "voucherNumber": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "required": [
                            "amount",
                            "currency"
                        ],
                        "type": "object",
                        "properties": {
                            "amount": {
                                "format": "double",
                                "type": "number"
                            },
                            "currency": {
                                "type": "string"
                            }
                        },
                        "example": {
                            "amount": 123.45,
                            "currency": "EUR"
                        }
                    },
                    "localValues": {
                        "type": "array",
                        "items": {
                            "required": [
                                "amount",
                                "currency"
                            ],
                            "type": "object",
                            "properties": {
                                "amount": {
                                    "format": "double",
                                    "type": "number"
                                },
                                "currency": {
                                    "type": "string"
                                }
                            },
                            "example": {
                                "amount": 123.45,
                                "currency": "EUR"
                            }
                        }
                    },
                    "points": {
                        "format": "double",
                        "type": "number"
                    }
                }
            },
            "PagedResultOfAvailableRewardVoucherModel": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AvailableRewardVoucherModel"
                        }
                    },
                    "totalCount": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "offset": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "count": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "AvailableRewardVoucherModel": {
                "type": "object",
                "properties": {
                    "expiresOn": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "id": {
                        "format": "uuid",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "voucherNumber": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "required": [
                            "amount",
                            "currency"
                        ],
                        "type": "object",
                        "properties": {
                            "amount": {
                                "format": "double",
                                "type": "number"
                            },
                            "currency": {
                                "type": "string"
                            }
                        },
                        "example": {
                            "amount": 123.45,
                            "currency": "EUR"
                        }
                    },
                    "localValues": {
                        "type": "array",
                        "items": {
                            "required": [
                                "amount",
                                "currency"
                            ],
                            "type": "object",
                            "properties": {
                                "amount": {
                                    "format": "double",
                                    "type": "number"
                                },
                                "currency": {
                                    "type": "string"
                                }
                            },
                            "example": {
                                "amount": 123.45,
                                "currency": "EUR"
                            }
                        }
                    },
                    "points": {
                        "format": "double",
                        "type": "number"
                    }
                }
            },
            "ReactivatedRewardVoucherModel": {
                "type": "object",
                "properties": {
                    "reactivationCount": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "id": {
                        "format": "uuid",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "voucherNumber": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "required": [
                            "amount",
                            "currency"
                        ],
                        "type": "object",
                        "properties": {
                            "amount": {
                                "format": "double",
                                "type": "number"
                            },
                            "currency": {
                                "type": "string"
                            }
                        },
                        "example": {
                            "amount": 123.45,
                            "currency": "EUR"
                        }
                    },
                    "localValues": {
                        "type": "array",
                        "items": {
                            "required": [
                                "amount",
                                "currency"
                            ],
                            "type": "object",
                            "properties": {
                                "amount": {
                                    "format": "double",
                                    "type": "number"
                                },
                                "currency": {
                                    "type": "string"
                                }
                            },
                            "example": {
                                "amount": 123.45,
                                "currency": "EUR"
                            }
                        }
                    },
                    "points": {
                        "format": "double",
                        "type": "number"
                    }
                }
            },
            "SendSmsRequest": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "invoiceReference": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "phoneNumbers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "sender": {
                        "type": "string"
                    }
                }
            },
            "SendSmsResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    }
                }
            },
            "ApiStore": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "city": {
                        "type": "string"
                    },
                    "countryCode": {
                        "type": "string"
                    },
                    "county": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "adjacentZipCodes": {
                        "type": "string"
                    },
                    "emailUnsubscribeText": {
                        "type": "string"
                    },
                    "emailViewOnlineText": {
                        "type": "string"
                    },
                    "externalId": {
                        "type": "string"
                    },
                    "footerHtml": {
                        "type": "string"
                    },
                    "headerHtml": {
                        "type": "string"
                    },
                    "homepage": {
                        "type": "string"
                    },
                    "phoneNumber": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "senderAddress": {
                        "type": "string"
                    },
                    "senderName": {
                        "type": "string"
                    },
                    "street": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "zipCode": {
                        "type": "string"
                    },
                    "active": {
                        "type": "boolean"
                    },
                    "timeZone": {
                        "type": "string"
                    }
                },
                "example": {
                    "name": "string",
                    "city": "string",
                    "countryCode": "string",
                    "county": "string",
                    "email": "string",
                    "adjacentZipCodes": "string",
                    "emailUnsubscribeText": "string",
                    "emailViewOnlineText": "string",
                    "externalId": "string",
                    "footerHtml": "string",
                    "headerHtml": "string",
                    "homepage": "string",
                    "phoneNumber": "string",
                    "region": "string",
                    "senderAddress": "string",
                    "senderName": "string",
                    "street": "string",
                    "type": "string",
                    "zipCode": "string",
                    "active": "boolean",
                    "timeZone": "string",
                    "extra1": "string",
                    "extra2": "string",
                    "language": "string"
                }
            },
            "IdName": {
                "type": "object",
                "properties": {
                    "id": {
                        "format": "uuid",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "Cart": {
                "description": "Cart model",
                "type": "object",
                "properties": {
                    "cartReference": {
                        "description": "Unique cart reference",
                        "type": "string"
                    },
                    "items": {
                        "description": "Cart items",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CartItem"
                        }
                    },
                    "time": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "contactId": {
                        "type": "string"
                    },
                    "sessionId": {
                        "type": "string"
                    },
                    "newSession": {
                        "type": "boolean"
                    },
                    "language": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "externalReferrer": {
                        "type": "string"
                    },
                    "utm": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Utm"
                        }
                    }
                },
                "example": {
                    "CartReference": "913b29ae-5238-4e8b-856b-3674f44c58b9",
                    "Items": [
                        {
                            "Sku": "7322514826390",
                            "Quantity": 2
                        },
                        {
                            "Sku": "5713729040206",
                            "Quantity": 4
                        }
                    ],
                    "Time": "2025-07-25T07:39:38.5015832+00:00",
                    "ContactId": "147a6632-957f-4618-ac61-1960c3aad5a4",
                    "SessionId": "f08650ca-bb10-4557-b23a-226533bf1496",
                    "NewSession": false,
                    "Language": "sv-SE",
                    "Url": "https://www.voyado.com",
                    "Utm": [
                        {
                            "key": "utm_campaign",
                            "value": "my-campaign"
                        },
                        {
                            "key": "utm_medium",
                            "value": "xyz"
                        }
                    ]
                }
            },
            "CartItem": {
                "description": "Cart item model",
                "type": "object",
                "properties": {
                    "sku": {
                        "description": "Stock keeping unit (article number)",
                        "type": "string"
                    },
                    "quantity": {
                        "format": "int32",
                        "description": "Quantity",
                        "type": "integer"
                    }
                }
            },
            "Utm": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "InvalidModelStateResult": {
                "type": "object",
                "properties": {
                    "modelState": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ModelState"
                        },
                        "readOnly": true
                    },
                    "includeErrorDetail": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "contentNegotiator": {
                        "$ref": "#/components/schemas/IContentNegotiator"
                    },
                    "request": {
                        "type": "object",
                        "readOnly": true
                    },
                    "formatters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MediaTypeFormatter"
                        },
                        "readOnly": true
                    }
                }
            },
            "IContentNegotiator": {
                "type": "object",
                "properties": {}
            },
            "MediaTypeFormatter": {
                "type": "object",
                "properties": {
                    "supportedMediaTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MediaTypeHeaderValue"
                        },
                        "readOnly": true
                    },
                    "supportedEncodings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Encoding"
                        },
                        "readOnly": true
                    },
                    "mediaTypeMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MediaTypeMapping"
                        },
                        "readOnly": true
                    },
                    "requiredMemberSelector": {
                        "$ref": "#/components/schemas/IRequiredMemberSelector"
                    }
                }
            },
            "MediaTypeHeaderValue": {
                "type": "object",
                "properties": {
                    "charSet": {
                        "type": "string"
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NameValueHeaderValue"
                        },
                        "readOnly": true
                    },
                    "mediaType": {
                        "type": "string"
                    }
                }
            },
            "Encoding": {
                "type": "object",
                "properties": {
                    "bodyName": {
                        "type": "string",
                        "readOnly": true
                    },
                    "encodingName": {
                        "type": "string",
                        "readOnly": true
                    },
                    "headerName": {
                        "type": "string",
                        "readOnly": true
                    },
                    "webName": {
                        "type": "string",
                        "readOnly": true
                    },
                    "windowsCodePage": {
                        "format": "int32",
                        "type": "integer",
                        "readOnly": true
                    },
                    "isBrowserDisplay": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "isBrowserSave": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "isMailNewsDisplay": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "isMailNewsSave": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "isSingleByte": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "encoderFallback": {
                        "$ref": "#/components/schemas/EncoderFallback"
                    },
                    "decoderFallback": {
                        "$ref": "#/components/schemas/DecoderFallback"
                    },
                    "isReadOnly": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "codePage": {
                        "format": "int32",
                        "type": "integer",
                        "readOnly": true
                    }
                }
            },
            "MediaTypeMapping": {
                "type": "object",
                "properties": {
                    "mediaType": {
                        "$ref": "#/components/schemas/MediaTypeHeaderValue"
                    }
                }
            },
            "IRequiredMemberSelector": {
                "type": "object",
                "properties": {}
            },
            "NameValueHeaderValue": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "readOnly": true
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "EncoderFallback": {
                "type": "object",
                "properties": {
                    "maxCharCount": {
                        "format": "int32",
                        "type": "integer",
                        "readOnly": true
                    }
                }
            },
            "DecoderFallback": {
                "type": "object",
                "properties": {
                    "maxCharCount": {
                        "format": "int32",
                        "type": "integer",
                        "readOnly": true
                    }
                }
            },
            "ProductView": {
                "type": "object",
                "properties": {
                    "itemId": {
                        "type": "string"
                    },
                    "category": {
                        "type": "string"
                    },
                    "time": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "contactId": {
                        "type": "string"
                    },
                    "sessionId": {
                        "type": "string"
                    },
                    "newSession": {
                        "type": "boolean"
                    },
                    "language": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "externalReferrer": {
                        "type": "string"
                    },
                    "utm": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Utm"
                        }
                    }
                },
                "example": {
                    "ItemId": "123XYZ",
                    "Category": "Women / Sweaters / Cardigan",
                    "Time": "2025-07-25T07:39:38.5797766+00:00",
                    "ContactId": "80aa73c8-fb50-4e4e-83b7-d1757c3875b6",
                    "SessionId": "45f52ab9-da26-4ee0-8347-7d8d0a8b77bf",
                    "NewSession": false,
                    "Language": "sv-SE",
                    "Url": "https://www.voyado.com?sku=eu901-011-v10",
                    "ExternalReferrer": "https://www.google.com",
                    "Utm": [
                        {
                            "key": "utm_campaign",
                            "value": "my-campaign"
                        },
                        {
                            "key": "utm_medium",
                            "value": "xyz"
                        }
                    ]
                }
            },
            "PagedResultOfTransactionItemWithArticlesResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TransactionItemWithArticlesResponse"
                        }
                    },
                    "totalCount": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "offset": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "count": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "TransactionItemWithArticlesResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "format": "uuid",
                        "type": "string",
                        "readOnly": true,
                        "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "externalId": {
                        "type": "string"
                    },
                    "transactionNumber": {
                        "type": "string",
                        "readOnly": true
                    },
                    "createdDate": {
                        "format": "date-time",
                        "type": "string",
                        "readOnly": true
                    },
                    "storeName": {
                        "type": "string",
                        "readOnly": true
                    },
                    "numberOfItems": {
                        "format": "int32",
                        "type": "integer",
                        "readOnly": true
                    },
                    "netPriceSum": {
                        "format": "double",
                        "type": "number",
                        "readOnly": true
                    },
                    "localNetPriceSum": {
                        "format": "double",
                        "type": "number",
                        "readOnly": true
                    },
                    "localCurrency": {
                        "type": "string",
                        "readOnly": true
                    },
                    "groupCurrency": {
                        "type": "string",
                        "readOnly": true
                    },
                    "storeType": {
                        "type": "string",
                        "readOnly": true
                    },
                    "lineItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TransactionLineItemWithArticleResponse"
                        },
                        "readOnly": true
                    }
                }
            },
            "TransactionLineItemWithArticleResponse": {
                "type": "object",
                "properties": {
                    "invoiceItemId": {
                        "format": "uuid",
                        "type": "string",
                        "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "type": {
                        "type": "string"
                    },
                    "isReturned": {
                        "type": "boolean"
                    },
                    "quantity": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "price": {
                        "format": "double",
                        "type": "number"
                    },
                    "netPrice": {
                        "format": "double",
                        "type": "number"
                    },
                    "localPrice": {
                        "format": "double",
                        "type": "number"
                    },
                    "article": {
                        "$ref": "#/components/schemas/ArticleResponse"
                    }
                }
            },
            "ArticleResponse": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "number": {
                        "type": "string"
                    },
                    "sku": {
                        "type": "string"
                    },
                    "itemNumber": {
                        "type": "string"
                    },
                    "brand": {
                        "type": "string"
                    },
                    "color": {
                        "type": "string"
                    },
                    "size": {
                        "type": "string"
                    },
                    "mainCategory": {
                        "type": "string"
                    },
                    "productCategory": {
                        "type": "string"
                    },
                    "subCategory": {
                        "type": "string"
                    },
                    "ageGroup": {
                        "type": "string"
                    },
                    "gender": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "season": {
                        "type": "string"
                    },
                    "gtin": {
                        "type": "string"
                    }
                }
            },
            "ImportReceiptRequest": {
                "required": [
                    "contact",
                    "uniqueReceiptId",
                    "receiptNumber",
                    "createdDate",
                    "storeExternalId",
                    "currency",
                    "totalGrossPrice",
                    "paymentMethods",
                    "items"
                ],
                "type": "object",
                "properties": {
                    "contact": {
                        "$ref": "#/components/schemas/ReceiptContactRequest"
                    },
                    "uniqueReceiptId": {
                        "type": "string"
                    },
                    "receiptNumber": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string"
                    },
                    "storeExternalId": {
                        "type": "string"
                    },
                    "currency": {
                        "type": "string"
                    },
                    "exchangeRateToGroupCurrency": {
                        "format": "double",
                        "minimum": 0,
                        "type": "number"
                    },
                    "totalGrossPrice": {
                        "format": "double",
                        "type": "number"
                    },
                    "paymentMethods": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReceiptPaymentMethodRequest"
                        }
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReceiptItemRequest"
                        }
                    },
                    "usedRewardVouchers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReceiptUsedRewardVoucherRequest"
                        }
                    },
                    "usedPromotions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReceiptUsedPromotionRequest"
                        }
                    },
                    "extraData": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReceiptExtraDataItemRequest"
                        }
                    }
                },
                "example": {
                    "contact": {
                        "matchKey": "someone@example.com",
                        "matchKeyType": "Email",
                        "contactType": "member"
                    },
                    "uniqueReceiptId": "2018468464468",
                    "receiptNumber": "468464468",
                    "createdDate": "2025-07-25T09:39:38.6622912+02:00",
                    "storeExternalId": "010",
                    "currency": "EUR",
                    "exchangeRateToGroupCurrency": 8.7,
                    "totalGrossPrice": 75,
                    "paymentMethods": [
                        {
                            "type": "card",
                            "description": "Debit Card",
                            "value": 75,
                            "extraData": [
                                {
                                    "name": "cardNumber",
                                    "value": "4545*"
                                },
                                {
                                    "name": "cardIssuer",
                                    "value": "The Bank"
                                }
                            ]
                        }
                    ],
                    "items": [
                        {
                            "type": "PURCHASE",
                            "sku": "21345589",
                            "quantity": 2,
                            "packQuantity": 150,
                            "grossPaidPrice": 75,
                            "taxAmount": 15,
                            "taxPercent": 25,
                            "extraData": [],
                            "articleNumber": "ER-358132134",
                            "articleName": "T-shirt",
                            "articleGroup": "Shirts",
                            "marginPercent": 29.7,
                            "awardsPoints": true,
                            "discounts": [
                                {
                                    "value": -30,
                                    "type": "Sale",
                                    "description": "30% sale"
                                },
                                {
                                    "value": -25,
                                    "type": "Voucher",
                                    "description": "Voucher 25 SEK"
                                }
                            ]
                        }
                    ],
                    "usedRewardVouchers": [
                        {
                            "voucherNumber": "2342"
                        }
                    ],
                    "usedPromotions": [
                        {
                            "couponId": "d9ef022d-9579-4baa-970c-0746f9c7f123"
                        },
                        {
                            "promotionId": "6374dfaa-31c5-4e34-bb88-7ccfc5fe8bf7"
                        }
                    ],
                    "extraData": []
                }
            },
            "ReceiptContactRequest": {
                "required": [
                    "matchKey",
                    "matchKeyType"
                ],
                "type": "object",
                "properties": {
                    "matchKey": {
                        "type": "string"
                    },
                    "matchKeyType": {
                        "enum": [
                            "Email",
                            "SocialSecurityNumber",
                            "MobilePhone",
                            "CardId",
                            "ExternalId",
                            "MemberNumber",
                            "ContactId",
                            "MemberNumberWithCardNumberAsFallback"
                        ],
                        "type": "string"
                    },
                    "contactType": {
                        "type": "string"
                    }
                }
            },
            "ReceiptPaymentMethodRequest": {
                "required": [
                    "type",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "value": {
                        "format": "double",
                        "type": "number"
                    },
                    "extraData": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReceiptExtraDataItemRequest"
                        }
                    }
                }
            },
            "ReceiptItemRequest": {
                "required": [
                    "type",
                    "sku",
                    "quantity",
                    "grossPaidPrice",
                    "taxAmount",
                    "taxPercent",
                    "articleNumber",
                    "articleName"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "PURCHASE",
                            "RETURN",
                            "ADJUSTMENT"
                        ],
                        "type": "string"
                    },
                    "sku": {
                        "type": "string"
                    },
                    "quantity": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "packQuantity": {
                        "format": "double",
                        "type": "number"
                    },
                    "grossPaidPrice": {
                        "format": "double",
                        "type": "number"
                    },
                    "taxAmount": {
                        "format": "double",
                        "type": "number"
                    },
                    "taxPercent": {
                        "format": "double",
                        "type": "number"
                    },
                    "extraData": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReceiptExtraDataItemRequest"
                        }
                    },
                    "articleNumber": {
                        "type": "string"
                    },
                    "articleName": {
                        "type": "string"
                    },
                    "articleGroup": {
                        "type": "string"
                    },
                    "marginPercent": {
                        "format": "double",
                        "type": "number"
                    },
                    "awardsPoints": {
                        "type": "boolean"
                    },
                    "discounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReceiptItemDiscountRequest"
                        }
                    }
                }
            },
            "ReceiptUsedRewardVoucherRequest": {
                "type": "object",
                "properties": {
                    "voucherNumber": {
                        "type": "string"
                    }
                }
            },
            "ReceiptUsedPromotionRequest": {
                "type": "object",
                "properties": {
                    "promotionId": {
                        "type": "string"
                    },
                    "couponId": {
                        "type": "string"
                    }
                }
            },
            "ReceiptExtraDataItemRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "ReceiptItemDiscountRequest": {
                "required": [
                    "value"
                ],
                "type": "object",
                "properties": {
                    "value": {
                        "format": "double",
                        "type": "number"
                    },
                    "type": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "BadRequestResult": {
                "type": "object",
                "properties": {
                    "request": {
                        "type": "object",
                        "readOnly": true
                    }
                }
            }
        }
    }
}